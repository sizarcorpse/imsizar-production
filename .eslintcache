[{"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\contexts\\AuthContext.js":"1","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Signup\\Signup.js":"2","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\index.js":"3","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\muiTheme\\Theme.js":"4","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Nav\\AdminUI\\AccountPopupMenu.js":"5","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Nav\\AdminUI\\CreateContentPopupMenu.js":"6","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Nav\\UserUI.js":"7","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\App.js":"8","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Nav\\muiNav.js":"9","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\muiTheme\\MuiDistributor.js":"10","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\customRoutes\\PrivateRoute.js":"11","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\customRoutes\\RouteBack.js":"12","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Nav\\Nav.js":"13","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Nav\\AdminUI\\AdminUI.js":"14","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Signin\\Signin.js":"15","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Signin\\ResetPassword.js":"16","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Signin\\logInFormValidation.js":"17","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Skeleton\\Contents.js":"18","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Skeleton\\Landing.js":"19","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Profile\\muiProfile.js":"20","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Profile\\Profile.js":"21","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\DirectMessage\\muiCreateConversation.js":"22","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Contact\\Contact.js":"23","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\DirectMessage\\CreateConversation.js":"24","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Gallery\\Gallery.js":"25","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Blog\\BlogPostCard.js":"26","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\customMui\\ScmuiIconText.js":"27","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\customMui\\gridCol.js":"28","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\DirectMessage\\Conversation.js":"29","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\DirectMessage\\Message.js":"30","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\AccountSetting\\ProfileSetting.js":"31","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\AccountSetting\\AccountSetting.js":"32","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Blog\\Sort.js":"33","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Profile\\muiMiniCard.js":"34","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Blog\\BlogsCommentsCard.js":"35","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Profile\\muiFeaturedSkill.js":"36","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Blog\\CreateBlog.js":"37","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Gallery\\CreateGallery.js":"38","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Profile\\FeaturedSkill.js":"39","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Nav\\PublicUI.js":"40","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Signup\\signupFromValidation.js":"41","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\DirectMessage\\muiConversation.js":"42","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Blog\\BlogPosts.js":"43","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Blog\\muiBlogPosts.js":"44","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Blog\\BlogCommentFormValidations.js":"45","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\DirectMessage\\DirectMessage.js":"46","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Signin\\resetPasswordValidation.js":"47","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\AccountSetting\\AccountSettingFormValidation.js":"48","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Profile\\UserProfile.js":"49","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\DirectMessage\\CreateConversationFormValidation.js":"50","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Gallery\\Sort.js":"51","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Profile\\FeaturedSkillCard.js":"52","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\DirectMessage\\Messages.js":"53","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Contact\\ContactFormValidation.js":"54","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Gallery\\muiCreateGallery.js":"55","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\AccountSetting\\ProfileSettingFormValidation.js":"56","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\customRoutes\\AdminRoute.js":"57","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\DirectMessage\\UserDetails.js":"58","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Profile\\ProfileMiniCard.js":"59","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\firebase.js":"60","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Reviews\\CreateReview.js":"61","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Reviews\\ReviewCommentsCard.js":"62","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Reviews\\ReviewCard.js":"63","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Reviews\\Reviews.js":"64","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Skills\\SkillCard.js":"65","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Skills\\muiSKillCard.js":"66","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Info\\Info.js":"67","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Skills\\UpdateSkill.js":"68","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Reviews\\ReviewCommentFormValidations.js":"69","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Footer\\Footer.js":"70"},{"size":4017,"mtime":1606410677682,"results":"71","hashOfConfig":"72"},{"size":15638,"mtime":1606497933764,"results":"73","hashOfConfig":"72"},{"size":421,"mtime":1606410850245,"results":"74","hashOfConfig":"72"},{"size":4131,"mtime":1606716687539,"results":"75","hashOfConfig":"72"},{"size":3036,"mtime":1605197122201,"results":"76","hashOfConfig":"72"},{"size":5843,"mtime":1606708284662,"results":"77","hashOfConfig":"72"},{"size":6184,"mtime":1606717158415,"results":"78","hashOfConfig":"72"},{"size":2493,"mtime":1606707280159,"results":"79","hashOfConfig":"72"},{"size":2901,"mtime":1606715650943,"results":"80","hashOfConfig":"72"},{"size":8370,"mtime":1606852319144,"results":"81","hashOfConfig":"72"},{"size":486,"mtime":1606410677775,"results":"82","hashOfConfig":"72"},{"size":486,"mtime":1606410677682,"results":"83","hashOfConfig":"72"},{"size":1224,"mtime":1606521405149,"results":"84","hashOfConfig":"72"},{"size":4060,"mtime":1606715670382,"results":"85","hashOfConfig":"72"},{"size":10039,"mtime":1606497933764,"results":"86","hashOfConfig":"72"},{"size":8674,"mtime":1606497933764,"results":"87","hashOfConfig":"72"},{"size":358,"mtime":1603459136031,"results":"88","hashOfConfig":"72"},{"size":3832,"mtime":1606797423681,"results":"89","hashOfConfig":"72"},{"size":1530,"mtime":1606849190738,"results":"90","hashOfConfig":"72"},{"size":4244,"mtime":1606717501687,"results":"91","hashOfConfig":"72"},{"size":11283,"mtime":1606850891276,"results":"92","hashOfConfig":"72"},{"size":1887,"mtime":1605866644497,"results":"93","hashOfConfig":"72"},{"size":18678,"mtime":1606526317617,"results":"94","hashOfConfig":"72"},{"size":8110,"mtime":1606527299412,"results":"95","hashOfConfig":"72"},{"size":6227,"mtime":1605701149945,"results":"96","hashOfConfig":"72"},{"size":14030,"mtime":1606713366690,"results":"97","hashOfConfig":"72"},{"size":814,"mtime":1606085713816,"results":"98","hashOfConfig":"72"},{"size":382,"mtime":1606602486996,"results":"99","hashOfConfig":"72"},{"size":2995,"mtime":1606495584450,"results":"100","hashOfConfig":"72"},{"size":2233,"mtime":1605865664417,"results":"101","hashOfConfig":"72"},{"size":26360,"mtime":1606503532505,"results":"102","hashOfConfig":"72"},{"size":14912,"mtime":1606503071488,"results":"103","hashOfConfig":"72"},{"size":3552,"mtime":1604921129647,"results":"104","hashOfConfig":"72"},{"size":1036,"mtime":1605969361708,"results":"105","hashOfConfig":"72"},{"size":4546,"mtime":1606852568431,"results":"106","hashOfConfig":"72"},{"size":3048,"mtime":1605253803454,"results":"107","hashOfConfig":"72"},{"size":14785,"mtime":1606597962318,"results":"108","hashOfConfig":"72"},{"size":11698,"mtime":1606599656472,"results":"109","hashOfConfig":"72"},{"size":12335,"mtime":1606601362099,"results":"110","hashOfConfig":"72"},{"size":1339,"mtime":1605790682233,"results":"111","hashOfConfig":"72"},{"size":949,"mtime":1603455707402,"results":"112","hashOfConfig":"72"},{"size":3320,"mtime":1605873990885,"results":"113","hashOfConfig":"72"},{"size":4836,"mtime":1606712781974,"results":"114","hashOfConfig":"72"},{"size":5349,"mtime":1606238321762,"results":"115","hashOfConfig":"72"},{"size":215,"mtime":1605887572735,"results":"116","hashOfConfig":"72"},{"size":3805,"mtime":1605873374599,"results":"117","hashOfConfig":"72"},{"size":286,"mtime":1606050103020,"results":"118","hashOfConfig":"72"},{"size":456,"mtime":1604175813755,"results":"119","hashOfConfig":"72"},{"size":9447,"mtime":1606851738516,"results":"120","hashOfConfig":"72"},{"size":211,"mtime":1605866467746,"results":"121","hashOfConfig":"72"},{"size":3582,"mtime":1606684028194,"results":"122","hashOfConfig":"72"},{"size":3215,"mtime":1605338874476,"results":"123","hashOfConfig":"72"},{"size":522,"mtime":1605157635629,"results":"124","hashOfConfig":"72"},{"size":1521,"mtime":1604574754543,"results":"125","hashOfConfig":"72"},{"size":2865,"mtime":1606599786084,"results":"126","hashOfConfig":"72"},{"size":1773,"mtime":1605337918975,"results":"127","hashOfConfig":"72"},{"size":497,"mtime":1606410677681,"results":"128","hashOfConfig":"72"},{"size":1585,"mtime":1605103277960,"results":"129","hashOfConfig":"72"},{"size":4013,"mtime":1606060803049,"results":"130","hashOfConfig":"72"},{"size":767,"mtime":1606410677681,"results":"131","hashOfConfig":"72"},{"size":9398,"mtime":1606714624871,"results":"132","hashOfConfig":"72"},{"size":4849,"mtime":1606852541244,"results":"133","hashOfConfig":"72"},{"size":12573,"mtime":1606713260278,"results":"134","hashOfConfig":"72"},{"size":4027,"mtime":1606797996834,"results":"135","hashOfConfig":"72"},{"size":5802,"mtime":1606716649151,"results":"136","hashOfConfig":"72"},{"size":1058,"mtime":1606716952298,"results":"137","hashOfConfig":"72"},{"size":4665,"mtime":1606798444201,"results":"138","hashOfConfig":"72"},{"size":23536,"mtime":1606707135293,"results":"139","hashOfConfig":"72"},{"size":217,"mtime":1606136680874,"results":"140","hashOfConfig":"72"},{"size":2599,"mtime":1606850269050,"results":"141","hashOfConfig":"72"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"145"},"1ngzq81",{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"149"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"156"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"145"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"164","messages":"165","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"156"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"179"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"182","messages":"183","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"185"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"145"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"193","messages":"194","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"204"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"207","messages":"208","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"175"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"145"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"156"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"230"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"239","messages":"240","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"145"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"179"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"156"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"156"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"264"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"275","messages":"276","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"175"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"185"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"223"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"175"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"298","messages":"299","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"300","messages":"301","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"302","messages":"303","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"308","messages":"309","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"310","messages":"311","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\contexts\\AuthContext.js",["316","317","318"],"import React, { useContext, createContext, useState, useEffect } from \"react\";\r\n\r\nimport app, { auth, provider } from \"../firebase\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSnackbar } from \"notistack\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [currentUser, setCurrentuser] = useState();\r\n  const [currentUserProfile, setCurrentUserProfile] = useState();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const history = useHistory();\r\n\r\n  function signup(email, password, firstName, lastName, username) {\r\n    const db = app.firestore();\r\n    try {\r\n      return auth\r\n        .createUserWithEmailAndPassword(email, password)\r\n        .then(async (credentials) => {\r\n          const newprofile = {\r\n            username: username,\r\n            profileName: `${firstName} ${lastName}`,\r\n            profilePhoto: \"\",\r\n            profileHeadline: \"\",\r\n            profileOrganization: \"\",\r\n            profileOrganizationUrl: \"\",\r\n            facebook: \"\",\r\n            github: \"\",\r\n            twitter: \"\",\r\n            profileWebsite: \"\",\r\n            linkedin: \"\",\r\n            profileLocation: \"\",\r\n            profileCountry: \"\",\r\n            profileAboutMe: \"\",\r\n          };\r\n          await db.doc(`users/${credentials.user.uid}`).set(newprofile);\r\n          return credentials.user;\r\n        })\r\n        .then(async (user) => {\r\n          await user.updateProfile({\r\n            displayName: `${firstName} ${lastName}`,\r\n          });\r\n        });\r\n    } catch (error) {\r\n      enqueueSnackbar(error.message, {\r\n        variant: \"error\",\r\n      });\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged((user) => {\r\n      if (user) {\r\n        user.getIdTokenResult().then((idTokenResult) => {\r\n          if (idTokenResult.claims.admin) {\r\n            user.admin = idTokenResult.claims.admin;\r\n            setCurrentuser(user);\r\n            setLoading(false);\r\n          } else {\r\n            setCurrentuser(user);\r\n            setLoading(false);\r\n          }\r\n        });\r\n      } else {\r\n        setLoading(false);\r\n      }\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    upp();\r\n  }, [currentUser]);\r\n\r\n  const upp = async () => {\r\n    const db = app.firestore();\r\n    if (currentUser) {\r\n      await db\r\n        .doc(`users/${currentUser.uid}`)\r\n        .get()\r\n        .then((doc) => {\r\n          setCurrentUserProfile(doc.data());\r\n        });\r\n    } else {\r\n      return;\r\n    }\r\n  };\r\n\r\n  function login(email, password) {\r\n    return auth.signInWithEmailAndPassword(email, password);\r\n  }\r\n\r\n  function logout() {\r\n    return auth.signOut();\r\n  }\r\n\r\n  function updateEmail(email) {\r\n    return currentUser.updateEmail(email);\r\n  }\r\n\r\n  function updatePassword(password) {\r\n    return currentUser.updatePassword(password);\r\n  }\r\n\r\n  function updateDisplayName(displayName) {\r\n    return currentUser\r\n      .updateProfile({ displayName: displayName })\r\n      .then(async () => {\r\n        const db = app.firestore();\r\n        await db\r\n          .doc(`users/${currentUser.uid}`)\r\n          .update({ profileName: displayName });\r\n      });\r\n  }\r\n  function updateProfilePhoto(photourl) {\r\n    return currentUser.updateProfile({ photoURL: photourl }).then(async () => {\r\n      const db = app.firestore();\r\n      await db\r\n        .doc(`users/${currentUser.uid}`)\r\n        .update({ profilePhoto: photourl });\r\n    });\r\n  }\r\n  function resetPassword(email) {\r\n    return auth.sendPasswordResetEmail(email);\r\n  }\r\n\r\n  const value = {\r\n    currentUser,\r\n    signup,\r\n    login,\r\n    logout,\r\n    updateEmail,\r\n    updatePassword,\r\n    updateDisplayName,\r\n    updateProfilePhoto,\r\n    resetPassword,\r\n    currentUserProfile,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n",["319","320"],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Signup\\Signup.js",["321"],"import React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { Formik, Form } from \"formik\";\r\n\r\n// #firebase :\r\nimport app, { auth } from \"../../firebase\";\r\n\r\n// #contexts :\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\n\r\n// #components :\r\n\r\n// #hooks :\r\nimport { useSnackbar } from \"notistack\";\r\n\r\n// #validations :\r\nimport { validationSchema } from \"./signupFromValidation\";\r\n\r\n// #material-ui :\r\nimport clsx from \"clsx\";\r\nimport { MuiDistributor } from \"../../muiTheme/MuiDistributor\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  FormControl,\r\n  InputAdornment,\r\n  Grid,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Divider,\r\n  Typography,\r\n  Button,\r\n  FormControlLabel,\r\n  Checkbox,\r\n  CssBaseline,\r\n  Paper,\r\n  TextField,\r\n  Box,\r\n} from \"@material-ui/core\";\r\nimport PersonIcon from \"@material-ui/icons/Person\";\r\nimport EmailIcon from \"@material-ui/icons/Email\";\r\nimport LockIcon from \"@material-ui/icons/Lock\";\r\nimport FaceIcon from \"@material-ui/icons/Face\";\r\nimport AlternateEmailIcon from \"@material-ui/icons/AlternateEmail\";\r\n\r\nconst Signup = (props) => {\r\n  const { classes } = props;\r\n  const { signup } = useAuth();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const history = useHistory();\r\n  const [loading, setLoading] = useState(false);\r\n  const [checked, setChecked] = React.useState(false);\r\n  const handleChecked = () => {\r\n    setChecked(!checked);\r\n  };\r\n\r\n  const initialValues = {\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    username: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n  };\r\n\r\n  const onSubmit = async (values, { resetForm }) => {\r\n    const { email, password, firstName, lastName, username } = values;\r\n    const db = app.firestore();\r\n    try {\r\n      setLoading(true);\r\n      db.collection(\"users\")\r\n        .where(\"username\", \"==\", username)\r\n        .limit(1)\r\n        .get()\r\n        .then((data) => {\r\n          data.forEach(async (doc) => {\r\n            if (doc.data().username === username) {\r\n              setLoading(false);\r\n              return enqueueSnackbar(\"username already exists\", {\r\n                variant: \"error\",\r\n              });\r\n            } else {\r\n              await signup(email, password, firstName, lastName, username);\r\n              history.push(\"/dashboard\");\r\n            }\r\n          });\r\n        });\r\n    } catch (e) {\r\n      enqueueSnackbar(e.message, {\r\n        variant: \"error\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      component=\"main\"\r\n      className={clsx(classes.ScuiMainContainer, classes.ScuiBackground)}\r\n    >\r\n      <CssBaseline />\r\n      <Grid item xs={false} xl={4} lg={3} md={2} sm={1} />\r\n      <Grid item xs={12} xl={4} lg={6} md={8} sm={10}>\r\n        {/* // #action : */}\r\n        <Box className={clsx(classes.ScuiMiddle, classes.ScuiBoxFullHeight)}>\r\n          <Paper className={classes.ScuiPaperSmall}>\r\n            <Card className={classes.ScuiCardSmall}>\r\n              <Box className={classes.ScuiMiddle}>\r\n                <CardHeader\r\n                  title={<Typography variant=\"h1\">Create Account</Typography>}\r\n                  subheader={\r\n                    <Typography variant=\"h4\" color=\"secondary\">\r\n                      Already have an account?\r\n                      <Link\r\n                        to={\"/login\"}\r\n                        className={classes.ScuiLinkUnderLineRemove}\r\n                      >\r\n                        Sign in{\" \"}\r\n                      </Link>\r\n                    </Typography>\r\n                  }\r\n                />\r\n              </Box>\r\n              {/* // #action : */}\r\n              <CardContent>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                  fullWidth\r\n                  startIcon={<AlternateEmailIcon color=\"primary\" />}\r\n                >\r\n                  <Typography variant=\"h5\" color=\"primary\">\r\n                    Sign up with google\r\n                  </Typography>\r\n                </Button>\r\n                <Divider className={classes.ScuiDividerT24} />\r\n              </CardContent>\r\n              {/* // #action : */}\r\n              <Formik\r\n                initialValues={initialValues}\r\n                validationSchema={validationSchema}\r\n                onSubmit={onSubmit}\r\n                validateOnChange={false}\r\n                validateOnBlur={false}\r\n              >\r\n                {(props) => {\r\n                  const {\r\n                    values,\r\n                    touched,\r\n                    errors,\r\n                    handleChange,\r\n                    handleBlur,\r\n                  } = props;\r\n                  return (\r\n                    <CardContent>\r\n                      <Form>\r\n                        <Grid container spacing={2}>\r\n                          <Grid item xs={6}>\r\n                            <FormControl\r\n                              error={\r\n                                touched.firstName && Boolean(errors.firstName)\r\n                              }\r\n                              fullWidth\r\n                            >\r\n                              <TextField\r\n                                InputProps={{\r\n                                  startAdornment:\r\n                                    touched.firstName &&\r\n                                    Boolean(errors.firstName) ? (\r\n                                      <InputAdornment position=\"start\">\r\n                                        <FaceIcon style={{ color: \"red\" }} />\r\n                                      </InputAdornment>\r\n                                    ) : (\r\n                                      <InputAdornment position=\"start\">\r\n                                        <FaceIcon />\r\n                                      </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                                autoComplete=\"firstName\"\r\n                                name=\"firstName\"\r\n                                variant=\"outlined\"\r\n                                id=\"firstName\"\r\n                                label=\"First Name\"\r\n                                value={values.firstName}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                            </FormControl>\r\n                          </Grid>\r\n\r\n                          <Grid item xs={6}>\r\n                            <FormControl\r\n                              error={\r\n                                touched.lastName && Boolean(errors.lastName)\r\n                              }\r\n                              fullWidth\r\n                            >\r\n                              <TextField\r\n                                InputProps={{\r\n                                  startAdornment:\r\n                                    touched.lastName &&\r\n                                    Boolean(errors.lastName) ? (\r\n                                      <InputAdornment position=\"start\">\r\n                                        <FaceIcon style={{ color: \"red\" }} />\r\n                                      </InputAdornment>\r\n                                    ) : (\r\n                                      <InputAdornment position=\"start\">\r\n                                        <FaceIcon />\r\n                                      </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                                autoComplete=\"lastName\"\r\n                                name=\"lastName\"\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                id=\"lastName\"\r\n                                label=\"Last Name\"\r\n                                value={values.lastName}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                            </FormControl>\r\n                          </Grid>\r\n                          <Divider />\r\n                          <Grid item xs={12}>\r\n                            <FormControl\r\n                              error={\r\n                                touched.username && Boolean(errors.username)\r\n                              }\r\n                              fullWidth\r\n                            >\r\n                              <TextField\r\n                                InputProps={{\r\n                                  startAdornment:\r\n                                    touched.username &&\r\n                                    Boolean(errors.username) ? (\r\n                                      <InputAdornment position=\"start\">\r\n                                        <PersonIcon style={{ color: \"red\" }} />\r\n                                      </InputAdornment>\r\n                                    ) : (\r\n                                      <InputAdornment position=\"start\">\r\n                                        <PersonIcon />\r\n                                      </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                                autoComplete=\"username\"\r\n                                name=\"username\"\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                id=\"username\"\r\n                                label=\"Username\"\r\n                                value={values.username}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                            </FormControl>\r\n                          </Grid>\r\n                          <Grid item xs={12}>\r\n                            <FormControl\r\n                              error={touched.email && Boolean(errors.email)}\r\n                              fullWidth\r\n                            >\r\n                              <TextField\r\n                                InputProps={{\r\n                                  startAdornment:\r\n                                    touched.email && Boolean(errors.email) ? (\r\n                                      <InputAdornment position=\"start\">\r\n                                        <EmailIcon style={{ color: \"red\" }} />\r\n                                      </InputAdornment>\r\n                                    ) : (\r\n                                      <InputAdornment position=\"start\">\r\n                                        <EmailIcon />\r\n                                      </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                                required\r\n                                autoComplete=\"email\"\r\n                                name=\"email\"\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                id=\"email\"\r\n                                label=\"Email Address\"\r\n                                value={values.email}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                            </FormControl>\r\n                          </Grid>\r\n                          <Grid item xs={12}>\r\n                            <FormControl\r\n                              error={\r\n                                touched.password && Boolean(errors.password)\r\n                              }\r\n                              fullWidth\r\n                            >\r\n                              <TextField\r\n                                InputProps={{\r\n                                  startAdornment:\r\n                                    touched.password &&\r\n                                    Boolean(errors.password) ? (\r\n                                      <InputAdornment position=\"start\">\r\n                                        <LockIcon style={{ color: \"red\" }} />\r\n                                      </InputAdornment>\r\n                                    ) : (\r\n                                      <InputAdornment position=\"start\">\r\n                                        <LockIcon />\r\n                                      </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                name=\"password\"\r\n                                label=\"Password\"\r\n                                type=\"password\"\r\n                                id=\"password\"\r\n                                autoComplete=\"current-password\"\r\n                                value={values.password}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                            </FormControl>\r\n                          </Grid>\r\n\r\n                          {/* // #action : */}\r\n                          <Grid item xs={12}>\r\n                            <Divider className={classes.ScuiDividerTB24} />\r\n                            <FormControlLabel\r\n                              control={\r\n                                <Checkbox\r\n                                  checked={checked}\r\n                                  onChange={handleChecked}\r\n                                  name=\"checkedB\"\r\n                                  style={{\r\n                                    color: \"#a1eafb\",\r\n                                  }}\r\n                                  size=\"small\"\r\n                                />\r\n                              }\r\n                              label={\r\n                                <Typography variant=\"h4\" color=\"secondary\">\r\n                                  I agree to the{\" \"}\r\n                                  <Link\r\n                                    className={classes.ScuiLinkUnderLineRemove}\r\n                                  >\r\n                                    Terms of Service\r\n                                  </Link>{\" \"}\r\n                                  and{\" \"}\r\n                                  <Link\r\n                                    className={classes.ScuiLinkUnderLineRemove}\r\n                                  >\r\n                                    Privacy Policy\r\n                                  </Link>\r\n                                </Typography>\r\n                              }\r\n                            />\r\n                          </Grid>\r\n                        </Grid>\r\n                        <Button\r\n                          type=\"submit\"\r\n                          variant=\"contained\"\r\n                          color=\"secondary\"\r\n                          fullWidth\r\n                          disabled={loading}\r\n                        >\r\n                          <Typography variant=\"h5\" color=\"primary\">\r\n                            Create Now\r\n                          </Typography>\r\n                        </Button>\r\n                      </Form>\r\n                    </CardContent>\r\n                  );\r\n                }}\r\n              </Formik>\r\n            </Card>\r\n          </Paper>\r\n        </Box>\r\n      </Grid>\r\n      <Grid item xs={false} xl={4} lg={3} md={2} sm={1} />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default withStyles(MuiDistributor)(Signup);\r\n",["322","323"],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\index.js",[],["324","325"],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\muiTheme\\Theme.js",["326"],"import { createMuiTheme } from \"@material-ui/core/styles\";\r\n\r\nconst baal = \"#3f72af\";\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      light: \"#112d4e\",\r\n      main: \"#112d4e\",\r\n      dark: \"#112d4e\",\r\n    },\r\n    secondary: {\r\n      // light: \" #f9f7f7\",\r\n      // main: \"#f9f7f7\",\r\n      // dark: \"#f9f7f7\",\r\n      light: \" #3f72af\",\r\n      main: \"#3f72af\",\r\n      dark: \"#303f9f\",\r\n    },\r\n    text: {\r\n      primary: \"#112d4e\",\r\n      secondary: \"#3f72af\",\r\n    },\r\n  },\r\n\r\n  //\r\n  typography: {\r\n    fontFamily: '\"Roboto\"',\r\n    h1: {\r\n      // signin signup\r\n      fontSize: 40,\r\n      letterSpacing: -1,\r\n      wordSpacing: -3,\r\n      lineHeight: 1.1,\r\n      fontWeight: 700,\r\n      fontStyle: \"normal\",\r\n      fontVariant: \"small-caps\",\r\n      color: \"#112d4e\",\r\n    },\r\n    h2: {\r\n      // craete\r\n      fontSize: 25,\r\n      letterSpacing: -1,\r\n      wordSpacing: -3,\r\n      fontWeight: 700,\r\n      lineHeight: 1.2,\r\n      fontStyle: \"normal\",\r\n      fontVariant: \"small-caps\",\r\n      color: \"#112d4e\",\r\n    },\r\n    h3: {\r\n      //skill head\r\n      fontSize: 30,\r\n      letterSpacing: 0,\r\n      wordSpacing: 4,\r\n      fontWeight: 700,\r\n      fontStyle: \"normal\",\r\n      fontVariant: \"normal\",\r\n    },\r\n    h4: {\r\n      // mian text\r\n      fontSize: 15,\r\n      fontWeight: 500,\r\n      fontStyle: \"normal\",\r\n      lineHeight: 1.5,\r\n      color: \"#112d4e\",\r\n    },\r\n    h5: {\r\n      // button text\r\n      fontSize: 14,\r\n      fontWeight: 500,\r\n      fontStyle: \"normal\",\r\n      lineHeight: 1.5,\r\n    },\r\n    h6: {\r\n      // not now text\r\n      marginRight: 50,\r\n      fontSize: 15,\r\n      fontWeight: 500,\r\n      fontStyle: \"normal\",\r\n      lineHeight: 2.7,\r\n      color: \"#132743\",\r\n      marginTop: 8,\r\n      marginRight: 48,\r\n    },\r\n\r\n    subtitle1: {\r\n      fontSize: 17,\r\n      fontWeight: 600,\r\n      fontStyle: \"normal\",\r\n    },\r\n\r\n    subtitle2: {\r\n      fontSize: 14,\r\n      fontWeight: 400,\r\n      fontStyle: \"normal\",\r\n      whiteSpace: \"pre-line\",\r\n    },\r\n\r\n    caption: {\r\n      letterSpacing: -0.5,\r\n      fontSize: 20,\r\n      wordSpacing: 1,\r\n      fontWeight: 600,\r\n      textDecoration: \"none\",\r\n      fontStyle: \"normal\",\r\n      fontVariant: \"normal\",\r\n      textTransform: \"none\",\r\n      fontFamily: \"Arial\",\r\n      display: \"flex\",\r\n      lineHeight: 1.5,\r\n    },\r\n\r\n    body1: {\r\n      fontSize: 16,\r\n      lineHeight: 1.5,\r\n      whiteSpace: \"pre-line\",\r\n    },\r\n    body2: {\r\n      fontSize: 12,\r\n      fontWeight: 500,\r\n    },\r\n    overline: {\r\n      fontSize: 15,\r\n      fontWeight: 500,\r\n      fontStyle: \"normal\",\r\n      lineHeight: 1.5,\r\n      color: \"#112d4e\",\r\n    },\r\n  },\r\n});\r\n\r\ntheme.overrides = {\r\n  // #action : Text field && input field\r\n  MuiInputLabel: {\r\n    root: {\r\n      top: 0,\r\n      color: \"#112d4e\",\r\n      fontSize: 14,\r\n      \"&$focused\": {\r\n        color: \"#3f72af\",\r\n      },\r\n    },\r\n  },\r\n  MuiInputBase: {\r\n    input: {\r\n      height: 5,\r\n      fontSize: \"14px\",\r\n      color: \"#3f72af\",\r\n    },\r\n  },\r\n  MuiOutlinedInput: {\r\n    root: {\r\n      \"& fieldset\": {\r\n        borderColor: \"#c1c1c1\",\r\n      },\r\n      \"&:hover\": {\r\n        \"& fieldset.MuiOutlinedInput\": {\r\n          borderColor: \"blue\",\r\n        },\r\n      },\r\n      \"&$focused\": {\r\n        \"& fieldset.MuiOutlinedInput-notchedOutline\": {\r\n          borderColor: \"#7579e7\",\r\n        },\r\n      },\r\n      \"&$active\": {\r\n        \"& fieldset.MuiOutlinedInput-notchedOutline\": {\r\n          borderColor: \"purple\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n\r\n  // #action : Button\r\n\r\n  MuiButton: {\r\n    root: {\r\n      borderRadius: 0,\r\n      textTransform: \"none\",\r\n    },\r\n    containedPrimary: {\r\n      height: 40,\r\n      marginTop: theme.spacing(1),\r\n      marginBotton: theme.spacing(1),\r\n      backgroundColor: baal,\r\n      \"&:hover\": {\r\n        backgroundColor: \"#396dab\",\r\n      },\r\n    },\r\n    containedSecondary: {\r\n      height: 40,\r\n      marginTop: theme.spacing(2),\r\n      marginBotton: theme.spacing(2),\r\n      backgroundColor: baal,\r\n      \"&:hover\": {\r\n        backgroundColor: \"#396dab\",\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\ntheme.props = {\r\n  // #action :\r\n};\r\n\r\nexport default theme;\r\n",["327","328"],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Nav\\AdminUI\\AccountPopupMenu.js",["329","330"],"import React from \"react\";\r\nimport { useAuth } from \"../../../contexts/AuthContext\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { navMui } from \"../muiNav\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Menu,\r\n  MenuItem,\r\n  CardHeader,\r\n  Divider,\r\n  Typography,\r\n  Avatar,\r\n} from \"@material-ui/core\";\r\n\r\nfunction AccountPopupMenu(props) {\r\n  const { currentUser } = useAuth();\r\n  const {\r\n    classes,\r\n    profileMenuOpen,\r\n    handleProfileMenuClose,\r\n    handleLogout,\r\n  } = props;\r\n\r\n  return (\r\n    <Menu\r\n      anchorEl={profileMenuOpen}\r\n      open={Boolean(profileMenuOpen)}\r\n      onClose={handleProfileMenuClose}\r\n      onMouseLeave={handleProfileMenuClose}\r\n      className={classes.menu}\r\n    >\r\n      <MenuItem onClick={handleProfileMenuClose}>\r\n        <CardHeader\r\n          style={{ paddingLeft: 0 }}\r\n          avatar={\r\n            <Avatar aria-label=\"recipe\" className={classes.avatar}>\r\n              <img\r\n                src={currentUser.photoURL}\r\n                alt=\"\"\r\n                style={{ height: 40, width: \"100%\", objectFit: \"cover\" }}\r\n              />\r\n            </Avatar>\r\n          }\r\n          title={\r\n            <Typography variant=\"h5\" className={classes.neckText}>\r\n              {currentUser.displayName}\r\n            </Typography>\r\n          }\r\n          subheader={\r\n            <Typography variant=\"p\" className={classes.neckText2}>\r\n              {currentUser.email}\r\n            </Typography>\r\n          }\r\n        />\r\n      </MenuItem>\r\n      <Divider\r\n        style={{\r\n          marginTop: \"0px\",\r\n          marginBottom: \"20px\",\r\n        }}\r\n      />\r\n      <MenuItem onClick={handleProfileMenuClose}>\r\n        <Typography variant=\"p\" className={classes.neckText2}>\r\n          Profile\r\n        </Typography>\r\n      </MenuItem>\r\n      <Link\r\n        variant=\"button\"\r\n        to={\"#\"}\r\n        className={classes.link}\r\n        to={\"/profilesettings\"}\r\n      >\r\n        <MenuItem onClick={handleProfileMenuClose}>\r\n          <Typography variant=\"p\" className={classes.neckText2}>\r\n            Profile Setting\r\n          </Typography>\r\n        </MenuItem>\r\n      </Link>\r\n      <Link\r\n        variant=\"button\"\r\n        to={\"#\"}\r\n        className={classes.link}\r\n        to={\"/accountsettings\"}\r\n      >\r\n        <MenuItem onClick={handleProfileMenuClose}>\r\n          <Typography variant=\"p\" className={classes.neckText2}>\r\n            Account Setting\r\n          </Typography>\r\n        </MenuItem>\r\n      </Link>\r\n      <MenuItem onClick={handleProfileMenuClose}>\r\n        <Typography variant=\"p\" className={classes.neckText2}>\r\n          Help\r\n        </Typography>\r\n      </MenuItem>\r\n      <Divider\r\n        style={{\r\n          marginTop: \"20px\",\r\n          marginBottom: \"20px\",\r\n        }}\r\n      />\r\n      <MenuItem onClick={handleLogout}>\r\n        <Typography variant=\"p\" className={classes.neckText2}>\r\n          Logout\r\n        </Typography>\r\n      </MenuItem>\r\n    </Menu>\r\n  );\r\n}\r\nexport default withStyles(navMui)(AccountPopupMenu);\r\n","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Nav\\AdminUI\\CreateContentPopupMenu.js",["331","332"],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Nav\\UserUI.js",["333","334"],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\App.js",["335","336","337"],"import React, { useContext } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\n// #firebase :\n\n// #contexts :\nimport { AuthProvider } from \"../contexts/AuthContext\";\n\n// #components :\nimport Nav from \"./Nav/Nav.js\";\nimport Signup from \"./Signup/Signup.js\";\nimport Signin from \"./Signin/Signin.js\";\nimport ResetPassword from \"./Signin/ResetPassword.js\";\n\nimport Landing from \"./Skeleton/Landing.js\";\n\nimport AccountSetting from \"./AccountSetting/AccountSetting.js\";\nimport ProfileSetting from \"./AccountSetting/ProfileSetting.js\";\nimport PrivateText from \"./DirectMessage/DirectMessage.js\";\n\nimport AdminRoute from \"../customRoutes/AdminRoute\";\nimport PrivateRoute from \"../customRoutes/PrivateRoute\";\nimport RouteBack from \"../customRoutes/RouteBack\";\n\n// #hooks :\nimport { SnackbarProvider } from \"notistack\";\n\n// #material-ui :\nimport { Button, ThemeProvider, CssBaseline } from \"@material-ui/core\";\nimport theme from \"../muiTheme/Theme\";\n\nfunction App() {\n  const notistackRef = React.createRef();\n  const onClickDismiss = (key) => () => {\n    notistackRef.current.closeSnackbar(key);\n  };\n\n  return (\n    <Router>\n      <ThemeProvider theme={theme}>\n        <SnackbarProvider\n          dense\n          maxSnack={5}\n          ref={notistackRef}\n          action={(key) => (\n            <Button size=\"small\" onClick={onClickDismiss(key)}>\n              Dismiss\n            </Button>\n          )}\n        >\n          <CssBaseline />\n          <AuthProvider>\n            <Route path=\"/\" component={Nav} />\n            <Switch>\n              <Route path=\"/signup\" exact component={Signup} />\n              <Route path=\"/login\" exact component={Signin} />\n              <Route path=\"/resetpassword\" exact component={ResetPassword} />\n\n              <Route path=\"/\" exact component={Landing} />\n              <Route path=\"/dashboard\" exact component={Landing} />\n              <PrivateRoute path=\"/u/:username\" exact component={Landing} />\n              <PrivateRoute path=\"/inbox\" exact component={PrivateText} />\n              <PrivateRoute\n                path=\"/profilesettings\"\n                exact\n                component={ProfileSetting}\n              />\n              <PrivateRoute\n                path=\"/accountsettings\"\n                exact\n                component={AccountSetting}\n              />\n            </Switch>\n          </AuthProvider>\n        </SnackbarProvider>\n      </ThemeProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Nav\\muiNav.js",[],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\muiTheme\\MuiDistributor.js",[],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\customRoutes\\PrivateRoute.js",[],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\customRoutes\\RouteBack.js",[],["338","339"],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Nav\\Nav.js",["340","341","342"],"import React from \"react\";\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\nimport { Link, useHistory, Redirect } from \"react-router-dom\";\r\n\r\nimport UserUI from \"./UserUI\";\r\nimport AdminUI from \"./AdminUI/AdminUI\";\r\nimport PublicUI from \"./PublicUI\";\r\n\r\nimport { navMui } from \"./muiNav\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { AppBar, CssBaseline, Box, Grid } from \"@material-ui/core\";\r\n\r\nconst Nav = (props) => {\r\n  const { classes } = props;\r\n  const { currentUser } = useAuth();\r\n\r\n  return (\r\n    <Grid container component=\"main\">\r\n      <CssBaseline />\r\n      <Grid item xs={12} xl={12} lg={12} md={12} sm={12}>\r\n        <Box>\r\n          {/* <CssBaseline /> */}\r\n          <AppBar\r\n            position=\"static\"\r\n            color=\"default\"\r\n            elevation={0}\r\n            className={classes.appBar}\r\n          >\r\n            {currentUser && currentUser.admin === undefined ? (\r\n              <UserUI />\r\n            ) : currentUser && currentUser.admin === true ? (\r\n              <AdminUI />\r\n            ) : (\r\n              <PublicUI />\r\n            )}\r\n          </AppBar>\r\n        </Box>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default withStyles(navMui)(Nav);\r\n",["343","344"],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Nav\\AdminUI\\AdminUI.js",["345","346","347"],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Signin\\Signin.js",["348","349","350","351","352"],"import React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { Formik, Form } from \"formik\";\r\n\r\n// #firebase :\r\nimport app, { auth } from \"../../firebase\";\r\n\r\n// #contexts :\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\n\r\n// #components :\r\n\r\n// #hooks :\r\nimport { useSnackbar } from \"notistack\";\r\n\r\n// #validations :\r\nimport { validationSchema } from \"./logInFormValidation\";\r\n\r\n// #material-ui :\r\nimport clsx from \"clsx\";\r\nimport { MuiDistributor } from \"../../muiTheme/MuiDistributor\";\r\n\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  FormControl,\r\n  InputAdornment,\r\n  Grid,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Divider,\r\n  Typography,\r\n  Button,\r\n  FormControlLabel,\r\n  Checkbox,\r\n  CssBaseline,\r\n  Paper,\r\n  TextField,\r\n  Box,\r\n} from \"@material-ui/core\";\r\n\r\nimport EmailIcon from \"@material-ui/icons/Email\";\r\nimport LockIcon from \"@material-ui/icons/Lock\";\r\nimport AlternateEmailIcon from \"@material-ui/icons/AlternateEmail\";\r\n\r\nconst Signin = (props) => {\r\n  const { classes } = props;\r\n  const history = useHistory();\r\n  const { login } = useAuth();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [loading, setLoading] = useState(false);\r\n  const [open, setOpen] = useState(false);\r\n  const [checked, setChecked] = React.useState(false);\r\n\r\n  const handleChecked = () => {\r\n    setChecked(!checked);\r\n  };\r\n\r\n  const initialValues = {\r\n    email: \"\",\r\n    password: \"\",\r\n  };\r\n\r\n  const onSubmit = async (values, { resetForm }) => {\r\n    const { email, password } = values;\r\n\r\n    try {\r\n      setLoading(true);\r\n      await login(email, password);\r\n      setTimeout(() => {\r\n        history.push(\"/dashboard\");\r\n      }, 10);\r\n    } catch {\r\n      enqueueSnackbar(\"Something went wrong🤪❌❌❗. Please try again😇👻.\", {\r\n        variant: \"error\",\r\n      });\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      component=\"main\"\r\n      className={clsx(classes.ScuiMainContainer, classes.ScuiBackground)}\r\n    >\r\n      {/* {loading && \"Loading \"} */}\r\n      <CssBaseline />\r\n      <Grid item xs={false} xl={4} lg={3} md={2} sm={1} />\r\n      <Grid item xs={12} xl={4} lg={6} md={8} sm={10}>\r\n        {/* // #action : */}\r\n        <Box className={clsx(classes.ScuiMiddle, classes.ScuiBoxFullHeight)}>\r\n          <Paper className={classes.ScuiPaperSmall}>\r\n            <Card className={classes.ScuiCardSmall}>\r\n              <Box className={classes.ScuiMiddle}>\r\n                <CardHeader\r\n                  title={<Typography variant=\"h1\">Welcome</Typography>}\r\n                  subheader={\r\n                    <Typography variant=\"h4\" color=\"secondary\">\r\n                      Don't have an Account?{\" \"}\r\n                      <Link\r\n                        to={\"/signup\"}\r\n                        className={classes.ScuiLinkUnderLineRemove}\r\n                      >\r\n                        Sign up{\" \"}\r\n                      </Link>\r\n                    </Typography>\r\n                  }\r\n                />\r\n              </Box>\r\n              {/* // #action : */}\r\n              <CardContent>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                  fullWidth\r\n                  startIcon={<AlternateEmailIcon color=\"secondary\" />}\r\n                >\r\n                  <Typography variant=\"h5\" color=\"primary\">\r\n                    Sign in with google\r\n                  </Typography>\r\n                </Button>\r\n                <Divider className={classes.ScuiDividerT24} />\r\n              </CardContent>\r\n              {/* // #action : */}\r\n              <Formik\r\n                initialValues={initialValues}\r\n                validationSchema={validationSchema}\r\n                onSubmit={onSubmit}\r\n                validateOnChange={false}\r\n                validateOnBlur={false}\r\n              >\r\n                {(props) => {\r\n                  const {\r\n                    values,\r\n                    touched,\r\n                    errors,\r\n                    handleChange,\r\n                    handleBlur,\r\n                  } = props;\r\n                  return (\r\n                    <CardContent>\r\n                      <Form>\r\n                        <Grid container spacing={2}>\r\n                          <Grid item xs={12}>\r\n                            <FormControl\r\n                              error={touched.email && Boolean(errors.email)}\r\n                              fullWidth\r\n                            >\r\n                              <TextField\r\n                                InputProps={{\r\n                                  startAdornment:\r\n                                    touched.email && Boolean(errors.email) ? (\r\n                                      <InputAdornment position=\"start\">\r\n                                        <EmailIcon style={{ color: \"red\" }} />\r\n                                      </InputAdornment>\r\n                                    ) : (\r\n                                      <InputAdornment position=\"start\">\r\n                                        <EmailIcon />\r\n                                      </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                                required\r\n                                autoComplete=\"email\"\r\n                                name=\"email\"\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                id=\"email\"\r\n                                label=\"Email Address\"\r\n                                value={values.email}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                            </FormControl>\r\n                          </Grid>\r\n                          <Grid item xs={12}>\r\n                            <FormControl\r\n                              error={\r\n                                touched.password && Boolean(errors.password)\r\n                              }\r\n                              fullWidth\r\n                            >\r\n                              <TextField\r\n                                InputProps={{\r\n                                  startAdornment:\r\n                                    touched.password &&\r\n                                    Boolean(errors.password) ? (\r\n                                      <InputAdornment position=\"start\">\r\n                                        <LockIcon style={{ color: \"red\" }} />\r\n                                      </InputAdornment>\r\n                                    ) : (\r\n                                      <InputAdornment position=\"start\">\r\n                                        <LockIcon />\r\n                                      </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                name=\"password\"\r\n                                label=\"Password\"\r\n                                type=\"password\"\r\n                                id=\"password\"\r\n                                autoComplete=\"current-password\"\r\n                                value={values.password}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                            </FormControl>\r\n                          </Grid>\r\n                          {/* // #action : */}\r\n                          <Grid item xs={12}>\r\n                            <Divider className={classes.ScuiDividerTB24} />\r\n                            <FormControlLabel\r\n                              control={\r\n                                <Checkbox\r\n                                  checked={checked}\r\n                                  onChange={handleChecked}\r\n                                  name=\"checkedB\"\r\n                                  style={{\r\n                                    color: \"#a1eafb\",\r\n                                  }}\r\n                                  size=\"small\"\r\n                                />\r\n                              }\r\n                              label={\r\n                                <Typography variant=\"h4\" color=\"secondary\">\r\n                                  Keep me logged in\r\n                                </Typography>\r\n                              }\r\n                            />\r\n                          </Grid>\r\n                        </Grid>\r\n                        <Button\r\n                          type=\"submit\"\r\n                          variant=\"contained\"\r\n                          color=\"secondary\"\r\n                          fullWidth\r\n                        >\r\n                          <Typography variant=\"h5\" color=\"primary\">\r\n                            Log in\r\n                          </Typography>\r\n                        </Button>\r\n                      </Form>\r\n                      <Divider className={classes.ScuiDividerTB24} />\r\n                      <Typography variant=\"h5\">\r\n                        <Link\r\n                          to={\"/resetpassword\"}\r\n                          className={classes.ScuiLinkUnderLineRemove}\r\n                        >\r\n                          Forgot your username or password?\r\n                        </Link>\r\n                      </Typography>\r\n                    </CardContent>\r\n                  );\r\n                }}\r\n              </Formik>\r\n            </Card>\r\n          </Paper>\r\n        </Box>\r\n      </Grid>\r\n      <Grid item xs={false} xl={4} lg={3} md={2} sm={1} />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default withStyles(MuiDistributor)(Signin);\r\n",["353","354"],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Signin\\ResetPassword.js",["355","356"],"import React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { Formik, Form } from \"formik\";\r\n\r\n// #firebase :\r\n// import app, { auth } from \"../../firebase\";\r\n\r\n// #contexts :\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\n\r\n// #components :\r\n\r\n// #hooks :\r\nimport { useSnackbar } from \"notistack\";\r\n// #validations :\r\nimport { validationSchema } from \"./resetPasswordValidation\";\r\n\r\n// #material-ui :\r\nimport clsx from \"clsx\";\r\nimport { MuiDistributor } from \"../../muiTheme/MuiDistributor\";\r\n\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n  FormControl,\r\n  Paper,\r\n  Divider,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Box,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\n\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport EmailIcon from \"@material-ui/icons/Email\";\r\nimport PhoneAndroidIcon from \"@material-ui/icons/PhoneAndroid\";\r\n\r\nconst ResetPassword = (props) => {\r\n  const { classes } = props;\r\n  const { resetPassword } = useAuth();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const initialValues = {\r\n    email: \"\",\r\n  };\r\n\r\n  const onSubmit = async (values, { resetForm }) => {\r\n    const { email, password } = values;\r\n\r\n    try {\r\n      setLoading(true);\r\n      await resetPassword(email);\r\n      enqueueSnackbar(\r\n        \"A reset email has been sent successfully. It may take several minutes\",\r\n        {\r\n          variant: \"success\",\r\n        }\r\n      );\r\n    } catch {\r\n      enqueueSnackbar(\"Something went wrong🤪❌❌❗. Please try again😇👻.\", {\r\n        variant: \"error\",\r\n      });\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      component=\"main\"\r\n      className={clsx(classes.ScuiMainContainer, classes.ScuiBackground)}\r\n    >\r\n      <Grid item xs={false} xl={4} lg={3} md={2} sm={1} />\r\n      <Grid item xs={12} xl={4} lg={6} md={8} sm={10}>\r\n        {/* // #action : */}\r\n        <Box className={clsx(classes.ScuiMiddle, classes.ScuiBoxFullHeight)}>\r\n          <Paper className={classes.ScuiPaperSmall}>\r\n            <Card className={classes.ScuiCardSmall}>\r\n              <Box className={classes.ScuiMiddle}>\r\n                <CardHeader\r\n                  title={<Typography variant=\"h1\">Reset Password</Typography>}\r\n                  subheader={\r\n                    <Typography variant=\"h4\" color=\"secondary\">\r\n                      Don't have an Account?\r\n                      <Link\r\n                        to={\"/signup\"}\r\n                        className={classes.ScuiLinkUnderLineRemove}\r\n                      >\r\n                        Sign up\r\n                      </Link>\r\n                    </Typography>\r\n                  }\r\n                />\r\n              </Box>\r\n              {/* // #action : */}\r\n              <Formik\r\n                initialValues={initialValues}\r\n                validationSchema={validationSchema}\r\n                onSubmit={onSubmit}\r\n                validateOnChange={false}\r\n                validateOnBlur={false}\r\n              >\r\n                {(props) => {\r\n                  const {\r\n                    values,\r\n                    touched,\r\n                    errors,\r\n                    handleChange,\r\n                    handleBlur,\r\n                  } = props;\r\n                  return (\r\n                    <CardContent>\r\n                      <Divider className={classes.ScuiDividerTB24} />\r\n                      <Form>\r\n                        <Grid container spacing={2}>\r\n                          <Grid item xs={12}>\r\n                            <FormControl\r\n                              error={touched.email && Boolean(errors.email)}\r\n                              fullWidth\r\n                            >\r\n                              <TextField\r\n                                InputProps={{\r\n                                  style: { backgroundColor: \"none\" },\r\n                                  startAdornment:\r\n                                    touched.email && Boolean(errors.email) ? (\r\n                                      <InputAdornment position=\"start\">\r\n                                        <EmailIcon style={{ color: \"red\" }} />\r\n                                      </InputAdornment>\r\n                                    ) : (\r\n                                      <InputAdornment position=\"start\">\r\n                                        <EmailIcon />\r\n                                      </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                                required\r\n                                autoComplete=\"email\"\r\n                                name=\"email\"\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                id=\"email\"\r\n                                label=\"Email Address\"\r\n                                value={values.email}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                            </FormControl>\r\n                          </Grid>\r\n                          <Grid item xs={12}>\r\n                            <TextField\r\n                              InputProps={{\r\n                                style: { backgroundColor: \"none\" },\r\n                                startAdornment:\r\n                                  touched.email && Boolean(errors.email) ? (\r\n                                    <InputAdornment position=\"start\">\r\n                                      <PhoneAndroidIcon\r\n                                        style={{ color: \"red\" }}\r\n                                      />\r\n                                    </InputAdornment>\r\n                                  ) : (\r\n                                    <InputAdornment position=\"start\">\r\n                                      <PhoneAndroidIcon />\r\n                                    </InputAdornment>\r\n                                  ),\r\n                              }}\r\n                              required\r\n                              autoComplete=\"\"\r\n                              name=\"\"\r\n                              variant=\"outlined\"\r\n                              fullWidth\r\n                              id=\"\"\r\n                              label=\"Phone Number\"\r\n                              disabled\r\n                            />\r\n                          </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                          <Divider className={classes.ScuiDividerTB24} />\r\n                          <Button\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            fullWidth\r\n                            disabled={loading}\r\n                          >\r\n                            <Typography variant=\"h5\" color=\"primary\">\r\n                              Reset Password\r\n                            </Typography>\r\n                          </Button>\r\n                        </Grid>\r\n                        <Divider className={classes.ScuiDividerTB24} />\r\n                        <Grid container>\r\n                          <Grid item xs>\r\n                            <Typography variant=\"h5\">\r\n                              <Link\r\n                                to={\"/Login\"}\r\n                                className={classes.ScuiLinkUnderLineRemove}\r\n                              >\r\n                                Already have an account?\r\n                              </Link>\r\n                            </Typography>\r\n                          </Grid>\r\n                          <Grid item>\r\n                            <Typography variant=\"h5\">\r\n                              <Link\r\n                                to={\"/signup\"}\r\n                                className={classes.ScuiLinkUnderLineRemove}\r\n                              >\r\n                                Sign Up\r\n                              </Link>\r\n                            </Typography>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </Form>\r\n                    </CardContent>\r\n                  );\r\n                }}\r\n              </Formik>\r\n            </Card>\r\n          </Paper>\r\n        </Box>\r\n      </Grid>\r\n\r\n      <Grid item xs={false} xl={4} lg={3} md={2} sm={1} />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default withStyles(MuiDistributor)(ResetPassword);\r\n","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Signin\\logInFormValidation.js",[],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Skeleton\\Contents.js",["357"],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Skeleton\\Landing.js",["358","359"],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Profile\\muiProfile.js",[],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Profile\\Profile.js",["360","361","362"],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\DirectMessage\\muiCreateConversation.js",[],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Contact\\Contact.js",["363","364","365","366","367"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\n// #firebase :\r\nimport app, { auth } from \"../../firebase\";\r\n\r\n// #contexts :\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\n// #validations :\r\nimport { validationSchema } from \"./ContactFormValidation\";\r\n\r\n// #material-ui :\r\nimport clsx from \"clsx\";\r\nimport withWidth, { isWidthUp } from \"@material-ui/core/withWidth\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { MuiDistributor } from \"../../muiTheme/MuiDistributor\";\r\n\r\nimport {\r\n  FormControl,\r\n  InputAdornment,\r\n  Grid,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Divider,\r\n  Typography,\r\n  Button,\r\n  TextareaAutosize,\r\n  Paper,\r\n  Select,\r\n  MenuItem,\r\n  InputLabel,\r\n  TextField,\r\n  Box,\r\n  Toolbar,\r\n  IconButton,\r\n} from \"@material-ui/core\";\r\nimport PersonIcon from \"@material-ui/icons/Person\";\r\nimport EmailIcon from \"@material-ui/icons/Email\";\r\nimport BusinessIcon from \"@material-ui/icons/Business\";\r\nimport BusinessCenterIcon from \"@material-ui/icons/BusinessCenter\";\r\nimport LanguageIcon from \"@material-ui/icons/Language\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nconst Contact = (props) => {\r\n  const { currentUser } = useAuth();\r\n  const { classes, handleContactMeModelClose, width } = props;\r\n\r\n  const [labelWidth, setLabelWidth] = useState(0);\r\n  const inputLabel = useRef(null);\r\n  const history = useHistory();\r\n  useEffect(() => {\r\n    setLabelWidth(inputLabel.current.offsetWidth);\r\n  }, []);\r\n\r\n  const initialValues = {\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    email: \"\",\r\n    companyName: \"\",\r\n    companyWebsite: \"\",\r\n    organization: \"\",\r\n    contactMessage: \"\",\r\n  };\r\n\r\n  const onSubmit = async (values, { resetForm }) => {\r\n    const {\r\n      firstName,\r\n      lastName,\r\n      email,\r\n      companyName,\r\n      companyWebsite,\r\n      organization,\r\n      contactMessage,\r\n    } = values;\r\n\r\n    const db = app.firestore();\r\n\r\n    const newContact = {\r\n      contactID: uuidv4(),\r\n      contactorFirstName: firstName,\r\n      contactorLastName: lastName,\r\n      contactorEmail: email,\r\n      contactorCompanyName: companyName,\r\n      contactorCompanyWebsite: companyWebsite,\r\n      contactorOrganization: organization,\r\n      contactorContactMessage: contactMessage,\r\n      contactorContactCreatedAt: new Date().toISOString(),\r\n    };\r\n\r\n    await db\r\n      .doc(`contacts/${newContact.contactID}`)\r\n      .set(newContact)\r\n      .then(() => {\r\n        handleContactMeModelClose(false);\r\n      })\r\n      .catch(() => console.log(\"error error\"));\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      component=\"main\"\r\n      className={clsx(classes.ScuiMainContainer, classes.ScuiModalBG)}\r\n      spacing={1}\r\n    >\r\n      <Grid item xs={12} xl={12} lg={12} md={12} sm={12}>\r\n        <Box>\r\n          <Toolbar className={classes.ScuiModalClose}>\r\n            <IconButton onClick={() => handleContactMeModelClose(false)}>\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </Toolbar>\r\n        </Box>\r\n      </Grid>\r\n      <Grid item xs={false} xl={3} lg={2} md={2} sm={1} />\r\n      <Grid item xs={12} xl={6} lg={8} md={8} sm={10}>\r\n        {/* // #action : */}\r\n        {/* <Box className={clsx(classes.ScuiMiddle, classes.ScuiBoxFullHeight)}> */}\r\n        <Box\r\n          className={clsx({\r\n            [classes.ScuiMiddle]: true,\r\n            [classes.ScuiBoxFullHeight]: width === \"xl\",\r\n            [classes.ScuiNone]: width === \"lg\",\r\n          })}\r\n        >\r\n          <Paper className={classes.ScuiPaperSmall}>\r\n            <Card className={classes.ScuiCardSmall}>\r\n              <CardHeader\r\n                title={<Typography variant=\"h2\">Lets Talk</Typography>}\r\n                subheader={\r\n                  <Typography variant=\"h4\" color=\"secondary\">\r\n                    Any question ? Please contact us.\r\n                  </Typography>\r\n                }\r\n              />\r\n              <Divider className={classes.ScuiDividerT24} />\r\n              {/* // #action : */}\r\n              <Formik\r\n                initialValues={initialValues}\r\n                validationSchema={validationSchema}\r\n                onSubmit={onSubmit}\r\n                validateOnChange={false}\r\n                validateOnBlur={false}\r\n              >\r\n                {(props) => {\r\n                  const {\r\n                    values,\r\n                    touched,\r\n                    errors,\r\n                    handleChange,\r\n                    handleBlur,\r\n                  } = props;\r\n                  return (\r\n                    <Form>\r\n                      <CardContent>\r\n                        <Grid container spacing={2}>\r\n                          <Grid item xs={12}>\r\n                            <FormControl\r\n                              error={\r\n                                touched.firstName && Boolean(errors.firstName)\r\n                              }\r\n                              fullWidth\r\n                            >\r\n                              <TextField\r\n                                InputProps={{\r\n                                  startAdornment:\r\n                                    touched.firstName &&\r\n                                    Boolean(errors.firstName) ? (\r\n                                      <InputAdornment position=\"start\">\r\n                                        <PersonIcon style={{ color: \"red\" }} />\r\n                                      </InputAdornment>\r\n                                    ) : (\r\n                                      <InputAdornment position=\"start\">\r\n                                        <PersonIcon />\r\n                                      </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                                required\r\n                                variant=\"outlined\"\r\n                                label=\"First Name\"\r\n                                name=\"firstName\"\r\n                                id=\"firstName\"\r\n                                value={values.firstName}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                            </FormControl>\r\n                          </Grid>\r\n                          <Grid item xs={12}>\r\n                            <FormControl\r\n                              error={\r\n                                touched.lastName && Boolean(errors.lastName)\r\n                              }\r\n                              fullWidth\r\n                            >\r\n                              <TextField\r\n                                InputProps={{\r\n                                  startAdornment:\r\n                                    touched.lastName &&\r\n                                    Boolean(errors.lastName) ? (\r\n                                      <InputAdornment position=\"start\">\r\n                                        <PersonIcon style={{ color: \"red\" }} />\r\n                                      </InputAdornment>\r\n                                    ) : (\r\n                                      <InputAdornment position=\"start\">\r\n                                        <PersonIcon />\r\n                                      </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                                required\r\n                                variant=\"outlined\"\r\n                                label=\"Last Name\"\r\n                                name=\"lastName\"\r\n                                id=\"lastName\"\r\n                                value={values.lastName}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                            </FormControl>\r\n                          </Grid>\r\n                          <Grid item xs={12}>\r\n                            <FormControl\r\n                              error={touched.email && Boolean(errors.email)}\r\n                              fullWidth\r\n                            >\r\n                              <TextField\r\n                                InputProps={{\r\n                                  startAdornment:\r\n                                    touched.email && Boolean(errors.email) ? (\r\n                                      <InputAdornment position=\"start\">\r\n                                        <EmailIcon style={{ color: \"red\" }} />\r\n                                      </InputAdornment>\r\n                                    ) : (\r\n                                      <InputAdornment position=\"start\">\r\n                                        <EmailIcon />\r\n                                      </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                                required\r\n                                variant=\"outlined\"\r\n                                type=\"email\"\r\n                                label=\"Email\"\r\n                                name=\"email\"\r\n                                id=\"email\"\r\n                                value={values.email}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                            </FormControl>\r\n                          </Grid>\r\n                          <Grid item xs={12}>\r\n                            <FormControl\r\n                              error={\r\n                                touched.companyName &&\r\n                                Boolean(errors.companyName)\r\n                              }\r\n                              fullWidth\r\n                            >\r\n                              <TextField\r\n                                InputProps={{\r\n                                  startAdornment:\r\n                                    touched.companyName &&\r\n                                    Boolean(errors.companyName) ? (\r\n                                      <InputAdornment position=\"start\">\r\n                                        <BusinessIcon\r\n                                          style={{ color: \"red\" }}\r\n                                        />\r\n                                      </InputAdornment>\r\n                                    ) : (\r\n                                      <InputAdornment position=\"start\">\r\n                                        <BusinessIcon />\r\n                                      </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                                required\r\n                                variant=\"outlined\"\r\n                                type=\"companyName\"\r\n                                label=\"Company Name\"\r\n                                name=\"companyName\"\r\n                                id=\"companyName\"\r\n                                value={values.companyName}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                            </FormControl>\r\n                          </Grid>\r\n                          <Grid item xs={12}>\r\n                            <FormControl\r\n                              error={\r\n                                touched.companyWebsite &&\r\n                                Boolean(errors.companyWebsite)\r\n                              }\r\n                              fullWidth\r\n                            >\r\n                              <TextField\r\n                                InputProps={{\r\n                                  startAdornment:\r\n                                    touched.companyWebsite &&\r\n                                    Boolean(errors.companyWebsite) ? (\r\n                                      <InputAdornment position=\"start\">\r\n                                        <LanguageIcon\r\n                                          style={{ color: \"red\" }}\r\n                                        />\r\n                                      </InputAdornment>\r\n                                    ) : (\r\n                                      <InputAdornment position=\"start\">\r\n                                        <LanguageIcon />\r\n                                      </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                                required\r\n                                variant=\"outlined\"\r\n                                type=\"companyWebsite\"\r\n                                label=\"Company Website\"\r\n                                name=\"companyWebsite\"\r\n                                id=\"companyWebsite\"\r\n                                value={values.companyWebsite}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                            </FormControl>\r\n                          </Grid>\r\n                          <Grid item xs={12}>\r\n                            <FormControl\r\n                              variant=\"outlined\"\r\n                              className={classes.ScuiSelect}\r\n                              fullWidth\r\n                              required\r\n                              error={\r\n                                touched.organization &&\r\n                                Boolean(errors.organization)\r\n                              }\r\n                            >\r\n                              <InputLabel\r\n                                ref={inputLabel}\r\n                                className={classes.focused}\r\n                                id=\"organization\"\r\n                              >\r\n                                What type of organization do you work with?\r\n                              </InputLabel>\r\n                              <Select\r\n                                native\r\n                                labelId=\"organization\"\r\n                                id=\"organization\"\r\n                                value={values.organization}\r\n                                onChange={handleChange}\r\n                                labelWidth={labelWidth}\r\n                                startAdornment={\r\n                                  touched.skillName &&\r\n                                  Boolean(errors.skillName) ? (\r\n                                    <InputAdornment position=\"start\">\r\n                                      <BusinessCenterIcon\r\n                                        style={{ color: \"red\" }}\r\n                                      />\r\n                                    </InputAdornment>\r\n                                  ) : (\r\n                                    <InputAdornment position=\"start\">\r\n                                      <BusinessCenterIcon />\r\n                                    </InputAdornment>\r\n                                  )\r\n                                }\r\n                                style={{ color: \"#132743\" }}\r\n                              >\r\n                                <option aria-label=\"None\" value=\"\" />\r\n                                <option value={\"Profile\"}>Profile</option>\r\n                                <option value={\"Freelance\"}>Freelance</option>\r\n                                <option value={\"Agency\"}>Agency</option>\r\n                                <option value={\"Startup\"}>Startup</option>\r\n                                <option value={\"Enterprise \"}>\r\n                                  Enterprise\r\n                                </option>\r\n                                <option value={\"University\"}>University</option>\r\n                                <option value={\"Other\"}>Other</option>\r\n                              </Select>\r\n                            </FormControl>\r\n                          </Grid>\r\n                          <Grid item xs={12}>\r\n                            <FormControl\r\n                              error={\r\n                                touched.contactMessage &&\r\n                                Boolean(errors.contactMessage)\r\n                              }\r\n                              fullWidth\r\n                              required\r\n                            >\r\n                              <TextareaAutosize\r\n                                required\r\n                                className={classes.ScuiTextAreaSmall}\r\n                                variant=\"outlined\"\r\n                                rowsMin={8}\r\n                                placeholder=\"Share something about your .\"\r\n                                s\r\n                                name=\"contactMessage\"\r\n                                id=\"contactMessage\"\r\n                                value={values.contactMessage}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                            </FormControl>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </CardContent>\r\n                      <Divider className={classes.ScuiDividerTB8} />\r\n                      <CardContent>\r\n                        <Grid item xs={12} className={classes.ScuiGridFooter}>\r\n                          <Typography\r\n                            variant=\"h6\"\r\n                            onClick={() => handleContactMeModelClose(false)}\r\n                          >\r\n                            <Link\r\n                              to={\"/dashboard\"}\r\n                              className={classes.ScuiLinkUnderLineRemove}\r\n                            >\r\n                              Not Now\r\n                            </Link>\r\n                          </Typography>\r\n                          <Button\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                          >\r\n                            <Typography variant=\"h5\">Send</Typography>\r\n                          </Button>\r\n                        </Grid>\r\n                      </CardContent>\r\n                    </Form>\r\n                  );\r\n                }}\r\n              </Formik>\r\n            </Card>\r\n          </Paper>\r\n        </Box>\r\n      </Grid>\r\n      <Grid item xs={false} xl={3} lg={2} md={2} sm={1} />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default withWidth()(withStyles(MuiDistributor)(Contact));\r\n",["368","369"],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\DirectMessage\\CreateConversation.js",["370","371","372","373"],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Gallery\\Gallery.js",["374","375"],"import React, { useState, useEffect, useCallback } from \"react\";\r\n\r\nimport Carousel, { Modal, ModalGateway } from \"react-images\";\r\nimport Gallery from \"react-photo-gallery\";\r\n// #firebase :\r\nimport app, { stroage } from \"../../firebase\";\r\n\r\n// #contexts :\r\n\r\n// #components :\r\nimport Sort from \"./Sort\";\r\n\r\n// #hooks :\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\n\r\n// #validations :\r\n\r\n// #material-ui :\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { gellaryMui } from \"./muiCreateGallery\";\r\nimport { Grid, Toolbar, IconButton, Box } from \"@material-ui/core\";\r\nimport ImportExportIcon from \"@material-ui/icons/ImportExport\";\r\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\r\n\r\nconst PhotoGallery = (props) => {\r\n  const { currentUser } = useAuth();\r\n  const { classes } = props;\r\n  const [currentImage, setCurrentImage] = useState(0);\r\n  const [viewerIsOpen, setViewerIsOpen] = useState(false);\r\n  const [GalleryPhotos, setGalleryPhotos] = useState([]);\r\n  const [sortValue, setSortValue] = useState(\"galleryPhotoCreatedAt\");\r\n  const [desc, setDesc] = useState(\"desc\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    console.log(\"colleced gallery\");\r\n    getGalleryPhotos();\r\n  }, [desc, sortValue]);\r\n\r\n  const getGalleryPhotos = () => {\r\n    setLoading(true);\r\n    let db = app.firestore();\r\n    db.collection(\"galleries\")\r\n      .orderBy(sortValue, desc)\r\n      .onSnapshot((querySnapshot) => {\r\n        let items = [];\r\n        querySnapshot.forEach((doc) => {\r\n          items.push(doc.data());\r\n        });\r\n        setGalleryPhotos(items);\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  const openLightbox = useCallback((event, { photo, index }) => {\r\n    setCurrentImage(index);\r\n    setViewerIsOpen(true);\r\n  }, []);\r\n\r\n  const closeLightbox = () => {\r\n    setCurrentImage(0);\r\n    setViewerIsOpen(false);\r\n  };\r\n\r\n  const descAsc = () => {\r\n    if (desc === \"desc\") {\r\n      setDesc(\"asc\");\r\n    } else {\r\n      setDesc(\"desc\");\r\n    }\r\n  };\r\n\r\n  const photosz = [];\r\n  if (GalleryPhotos) {\r\n    GalleryPhotos.map(async (photo) => {\r\n      let cons = {\r\n        src: photo.galleryPhoto,\r\n        width: photo.galleryPhotoWidth,\r\n        height: photo.galleryPhotoHeight,\r\n        galleryPhotoID: photo.galleryPhotoID,\r\n        galleryPhotoCreatorID: photo.galleryPhotoCreatorID,\r\n      };\r\n\r\n      photosz.push(cons);\r\n    });\r\n  }\r\n\r\n  const deletePhoto = async (\r\n    galleryPhotoID,\r\n    galleryPhotoCreatorID,\r\n    galleryPhoto\r\n  ) => {\r\n    try {\r\n      const db = app.firestore();\r\n\r\n      if (currentUser.uid === galleryPhotoCreatorID) {\r\n        const document = db.doc(`galleries/${galleryPhotoID}`);\r\n        await document\r\n          .get()\r\n          .then(async (doc) => {\r\n            if (!doc.exists) {\r\n              return console.log(\"document not found\");\r\n            }\r\n            if (doc.data().galleryPhotoCreatorID !== currentUser.uid) {\r\n              return console.log(\"you dont have permisson\");\r\n            } else {\r\n              return await document.delete();\r\n            }\r\n          })\r\n          .then(async () => {\r\n            const file = stroage.refFromURL(galleryPhoto);\r\n            if (!file) {\r\n              return console.log(\"document not found\");\r\n            } else {\r\n              return await file.delete();\r\n            }\r\n          })\r\n          .then(() => {\r\n            console.log(\"document delted successfully\");\r\n          });\r\n      } else {\r\n        console.log(\"you dont have permisson\");\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid container>\r\n      <Grid\r\n        item\r\n        xl={12}\r\n        lg={12}\r\n        md={12}\r\n        sm={12}\r\n        xs={12}\r\n        style={{ display: \"flex\", justifyContent: \"flex-end\" }}\r\n      >\r\n        <Toolbar style={{ minHeight: 15, paddingRight: 0 }}>\r\n          <Sort setSortValue={setSortValue} />\r\n          <IconButton\r\n            style={{ right: 29 }}\r\n            onClick={descAsc}\r\n            title={desc === \"desc\" ? \"desc\" : \"asc\"}\r\n          >\r\n            <ImportExportIcon style={{ fontSize: 20, color: \"#1d2d50\" }} />\r\n          </IconButton>\r\n        </Toolbar>\r\n      </Grid>\r\n\r\n      <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\r\n        {photosz ? (\r\n          <Box className={classes.modelx}>\r\n            <Gallery\r\n              photos={photosz}\r\n              onClick={openLightbox}\r\n              className={classes.modely}\r\n              style={{ objectFit: \"cover\" }}\r\n            />\r\n            <ModalGateway\r\n              className={classes.modelx}\r\n              style={{ objectFit: \"cover\" }}\r\n            >\r\n              {viewerIsOpen ? (\r\n                <Modal onClose={closeLightbox} className={classes.model}>\r\n                  <Carousel\r\n                    className={classes.model}\r\n                    allowFullscreen=\"true\"\r\n                    isFullscreen=\"true\"\r\n                    autoSize={true}\r\n                    preventScroll=\"true\"\r\n                    currentIndex={currentImage}\r\n                    views={photosz.map((x) => ({\r\n                      ...x,\r\n                      srcset: x.srcSet,\r\n                      caption: (\r\n                        <>\r\n                          {currentUser.admin === true ? (\r\n                            <IconButton\r\n                              onClick={() => {\r\n                                deletePhoto(\r\n                                  x.galleryPhotoID,\r\n                                  x.galleryPhotoCreatorID,\r\n                                  x.src\r\n                                );\r\n                              }}\r\n                            >\r\n                              <DeleteForeverIcon style={{ color: \"white\" }} />\r\n                            </IconButton>\r\n                          ) : null}\r\n                        </>\r\n                      ),\r\n                    }))}\r\n                  />\r\n                </Modal>\r\n              ) : null}\r\n            </ModalGateway>\r\n          </Box>\r\n        ) : (\r\n          <p>no photo</p>\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\nexport default withStyles(gellaryMui)(PhotoGallery);\r\n","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Blog\\BlogPostCard.js",["376","377","378","379","380"],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\customMui\\ScmuiIconText.js",[],["381","382"],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\customMui\\gridCol.js",[],["383","384"],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\DirectMessage\\Conversation.js",["385","386","387","388","389","390"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\nimport app from \"../../firebase\";\r\n\r\nimport Messages from \"./Messages\";\r\n\r\nimport { conversationMui } from \"./muiConversation\";\r\nimport { FormControl, TextField, Box } from \"@material-ui/core\";\r\n\r\nconst Conversation = (props) => {\r\n  const { currentUser } = useAuth();\r\n  const { scID, classes } = props;\r\n\r\n  const [messages, setMessages] = useState([]);\r\n  const [textMessage, setTextMessage] = useState(\"\");\r\n  // const dummy = useRef();\r\n  useEffect(() => {\r\n    console.log(\"colleced conversation\");\r\n    getConversation();\r\n  }, []);\r\n\r\n  const getConversation = async () => {\r\n    const db = app.firestore();\r\n    let conv = db\r\n      .collection(\"conversations\")\r\n      .doc(`${scID.conversationID}`)\r\n      .collection(\"messages\")\r\n      .orderBy(\"messageCreatedAt\")\r\n      .limitToLast(15);\r\n\r\n    conv.onSnapshot((messages) => {\r\n      let bo = [];\r\n      messages.forEach((message) => {\r\n        bo.push(message.data());\r\n      });\r\n      setMessages(bo);\r\n\r\n      // dummy.current.scrollIntoView({ behavior: \"smooth\" });\r\n    });\r\n  };\r\n  //   console.log(messages);\r\n\r\n  const sendMessage = async (e) => {\r\n    e.preventDefault();\r\n    const db = app.firestore();\r\n\r\n    const newText = {\r\n      messageID: uuidv4(),\r\n      messageCreatedAt: new Date().toISOString(),\r\n      messageBody: textMessage,\r\n      senderUID: currentUser.uid,\r\n      senderDisplayname: currentUser.displayName,\r\n      senderPhotoUrl: currentUser.photoURL,\r\n    };\r\n\r\n    await db\r\n      .collection(\"conversations\")\r\n      .doc(`${scID.conversationID}`)\r\n      .collection(\"messages\")\r\n      .doc(newText.messageID)\r\n      .set(newText)\r\n      .then(() => {\r\n        setTextMessage(\"\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box className={classes.container}>\r\n        <Messages messages={messages} />\r\n      </Box>\r\n\r\n      <div className={classes.inputArea}>\r\n        <form>\r\n          <FormControl\r\n            fullWidth\r\n            style={{\r\n              padding: \"0px 30px 10px 30px\",\r\n              height: \"30px\",\r\n              margin: 0,\r\n            }}\r\n          >\r\n            <TextField\r\n              placeholder=\"Type a message\"\r\n              type=\"text\"\r\n              margin=\"normal\"\r\n              required\r\n              value={textMessage}\r\n              autoFocus\r\n              onChange={(e) => setTextMessage(e.target.value)}\r\n              onKeyPress={(e) => (e.key === \"Enter\" ? sendMessage(e) : null)}\r\n              className={classes.rootx}\r\n            />\r\n          </FormControl>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withStyles(conversationMui)(Conversation);\r\n\r\n//EOcaBSskqLeapjq59bSD3XXzi853\r\n//9jpkGFX4qDhTq7OsPLavTAiyiuk2\r\n","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\DirectMessage\\Message.js",[],["391","392"],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\AccountSetting\\ProfileSetting.js",["393","394","395","396","397","398","399"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { Formik, Form } from \"formik\";\r\n// #firebase :\r\nimport app, { auth } from \"../../firebase\";\r\n\r\n// #contexts :\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\n// #validations :\r\nimport { validationSchema } from \"./ProfileSettingFormValidation\";\r\n\r\n// #material-ui :\r\nimport clsx from \"clsx\";\r\nimport withWidth, { isWidthUp } from \"@material-ui/core/withWidth\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { MuiDistributor } from \"../../muiTheme/MuiDistributor\";\r\n\r\nimport {\r\n  FormControl,\r\n  InputAdornment,\r\n  Grid,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Divider,\r\n  Typography,\r\n  Button,\r\n  CssBaseline,\r\n  Paper,\r\n  TextareaAutosize,\r\n  TextField,\r\n  Box,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\n\r\nimport BusinessIcon from \"@material-ui/icons/Business\";\r\nimport HttpIcon from \"@material-ui/icons/Http\";\r\nimport FacebookIcon from \"@material-ui/icons/Facebook\";\r\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\r\nimport TwitterIcon from \"@material-ui/icons/Twitter\";\r\nimport LanguageIcon from \"@material-ui/icons/Language\";\r\nimport LinkedInIcon from \"@material-ui/icons/LinkedIn\";\r\nimport LocationOnIcon from \"@material-ui/icons/LocationOn\";\r\nimport PublicIcon from \"@material-ui/icons/Public\";\r\n\r\nconst ProfileSetting = (props) => {\r\n  const { classes, width } = props;\r\n  const { currentUser } = useAuth();\r\n  const history = useHistory();\r\n  const [loading, setLoading] = useState(false);\r\n  const [open, setOpen] = useState(false);\r\n  const [profile, setProfile] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    console.log(\"profile collected\");\r\n\r\n    getUserProfile();\r\n  }, []);\r\n\r\n  const getUserProfile = async () => {\r\n    setLoading(true);\r\n    const db = app.firestore();\r\n\r\n    const profileRef = db.doc(`users/${currentUser.uid}`);\r\n\r\n    profileRef\r\n      .get()\r\n      .then((doc) => {\r\n        if (!doc.exists) {\r\n          return console.log(\"sorry no user\");\r\n        } else {\r\n          setProfile(doc.data());\r\n        }\r\n      })\r\n      .then(() => {\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  const initialValues = {\r\n    profileHeadline: profile.profileHeadline,\r\n    profileOrganization: profile.profileOrganization,\r\n    profileOrganizationUrl: profile.profileOrganizationUrl,\r\n    facebook: profile.facebook,\r\n    github: profile.github,\r\n    twitter: profile.twitter,\r\n    profileWebsite: profile.profileWebsite,\r\n    linkedin: profile.linkedin,\r\n    profileLocation: profile.profileLocation,\r\n    profileCountry: profile.profileCountry,\r\n    profileAboutMe: profile.profileAboutMe,\r\n  };\r\n\r\n  const onSubmit = async (values, { resetForm }) => {\r\n    setLoading(true);\r\n\r\n    const {\r\n      profileHeadline,\r\n      profileOrganization,\r\n      profileOrganizationUrl,\r\n      facebook,\r\n      github,\r\n      twitter,\r\n      profileWebsite,\r\n      linkedin,\r\n      profileLocation,\r\n      profileCountry,\r\n      profileAboutMe,\r\n    } = values;\r\n    const db = app.firestore();\r\n\r\n    const newProfile = {\r\n      profileHeadline,\r\n      profileOrganization,\r\n      profileOrganizationUrl,\r\n      facebook,\r\n      github,\r\n      twitter,\r\n      profileWebsite,\r\n      linkedin,\r\n      profileLocation,\r\n      profileCountry,\r\n      profileAboutMe,\r\n    };\r\n\r\n    await db\r\n      .doc(`users/${currentUser.uid}`)\r\n      .update(newProfile)\r\n      .then(() => {\r\n        console.log(\"profile update successfully\");\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  console.log(\"width\", width);\r\n  return (\r\n    <Grid\r\n      container\r\n      component=\"main\"\r\n      className={clsx(classes.ScuiMainContainer, classes.ScuiBackground)}\r\n    >\r\n      <CssBaseline />\r\n      <Grid item xs={false} xl={3} lg={2} md={2} sm={1} />\r\n      {!loading ? (\r\n        <Grid item xs={12} xl={6} lg={8} md={8} sm={10}>\r\n          {/* // #action : */}\r\n          <Box\r\n            className={clsx({\r\n              [classes.ScuiMiddle]: true,\r\n              [classes.ScuiBoxFullHeight]: width === \"xl\",\r\n              [classes.ScuiNone]: width === \"lg\",\r\n            })}\r\n          >\r\n            <Paper className={classes.ScuiPaperLarge}>\r\n              <Card className={classes.ScuiCardLarge}>\r\n                <CardHeader\r\n                  title={<Typography variant=\"h2\">Profile Settings</Typography>}\r\n                  subheader={\r\n                    <>\r\n                      <Typography variant=\"h4\" color=\"secondary\">\r\n                        Want to update account settings ?\r\n                        <Link\r\n                          to={\"/accountsettings\"}\r\n                          className={classes.ScuiLinkUnderLineRemove}\r\n                        >\r\n                          Account Settings\r\n                        </Link>\r\n                      </Typography>\r\n                    </>\r\n                  }\r\n                />\r\n                <Divider className={classes.ScuiDividerT24} />\r\n                {/* // #action : */}\r\n                <Formik\r\n                  initialValues={initialValues}\r\n                  validationSchema={validationSchema}\r\n                  onSubmit={onSubmit}\r\n                  validateOnChange={false}\r\n                  validateOnBlur={false}\r\n                >\r\n                  {(props) => {\r\n                    const {\r\n                      values,\r\n                      touched,\r\n                      errors,\r\n                      handleChange,\r\n                      handleBlur,\r\n                    } = props;\r\n                    return (\r\n                      <Form>\r\n                        <CardContent className={classes.ScuiCardLargeMainArea}>\r\n                          <Grid container spacing={2}>\r\n                            <Grid item xs={12}>\r\n                              <FormControl\r\n                                error={\r\n                                  touched.profileHeadline &&\r\n                                  Boolean(errors.profileHeadline)\r\n                                }\r\n                                fullWidth\r\n                                color=\"primary\"\r\n                              >\r\n                                <TextareaAutosize\r\n                                  variant=\"outlined\"\r\n                                  className={classes.ScuiTextAreaSmall}\r\n                                  rowsMin={4}\r\n                                  aria-label=\"maximum height\"\r\n                                  placeholder=\"Tell me about yourself. max 99 words\"\r\n                                  name=\"profileHeadline\"\r\n                                  id=\"profileHeadline\"\r\n                                  defaultValue={profile.profileHeadline}\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                />\r\n                              </FormControl>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12}>\r\n                              <FormControl\r\n                                error={\r\n                                  touched.profileOrganization &&\r\n                                  Boolean(errors.profileOrganization)\r\n                                }\r\n                                fullWidth\r\n                              >\r\n                                <TextField\r\n                                  InputProps={{\r\n                                    startAdornment:\r\n                                      touched.profileOrganization &&\r\n                                      Boolean(errors.profileOrganization) ? (\r\n                                        <InputAdornment position=\"start\">\r\n                                          <BusinessIcon\r\n                                            style={{ color: \"red\" }}\r\n                                          />\r\n                                        </InputAdornment>\r\n                                      ) : (\r\n                                        <InputAdornment position=\"start\">\r\n                                          <BusinessIcon />\r\n                                        </InputAdornment>\r\n                                      ),\r\n                                  }}\r\n                                  name=\"profileOrganization\"\r\n                                  variant=\"outlined\"\r\n                                  fullWidth\r\n                                  id=\"profileOrganization\"\r\n                                  label=\"Organization Name\"\r\n                                  defaultValue={profile.profileOrganization}\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                />\r\n                              </FormControl>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12}>\r\n                              <FormControl\r\n                                error={\r\n                                  touched.profileOrganizationUrl &&\r\n                                  Boolean(errors.profileOrganizationUrl)\r\n                                }\r\n                                fullWidth\r\n                              >\r\n                                <TextField\r\n                                  InputProps={{\r\n                                    startAdornment:\r\n                                      touched.profileOrganizationUrl &&\r\n                                      Boolean(errors.profileOrganizationUrl) ? (\r\n                                        <InputAdornment position=\"start\">\r\n                                          <HttpIcon style={{ color: \"red\" }} />\r\n                                        </InputAdornment>\r\n                                      ) : (\r\n                                        <InputAdornment position=\"start\">\r\n                                          <HttpIcon />\r\n                                        </InputAdornment>\r\n                                      ),\r\n                                  }}\r\n                                  variant=\"outlined\"\r\n                                  fullWidth\r\n                                  name=\"profileOrganizationUrl\"\r\n                                  label=\"Oraganization Website\"\r\n                                  id=\"profileOrganizationUrl\"\r\n                                  defaultValue={profile.profileOrganizationUrl}\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                />\r\n                              </FormControl>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                              <FormControl\r\n                                error={\r\n                                  touched.profileLocation &&\r\n                                  Boolean(errors.profileLocation)\r\n                                }\r\n                                fullWidth\r\n                              >\r\n                                <TextField\r\n                                  InputProps={{\r\n                                    startAdornment:\r\n                                      touched.profileLocation &&\r\n                                      Boolean(errors.profileLocation) ? (\r\n                                        <InputAdornment position=\"start\">\r\n                                          <LocationOnIcon\r\n                                            style={{ color: \"red\" }}\r\n                                          />\r\n                                        </InputAdornment>\r\n                                      ) : (\r\n                                        <InputAdornment position=\"start\">\r\n                                          <LocationOnIcon />\r\n                                        </InputAdornment>\r\n                                      ),\r\n                                  }}\r\n                                  variant=\"outlined\"\r\n                                  fullWidth\r\n                                  name=\"profileLocation\"\r\n                                  label=\"Location\"\r\n                                  id=\"profileLocation\"\r\n                                  defaultValue={profile.profileLocation}\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                />\r\n                              </FormControl>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                              <FormControl\r\n                                error={\r\n                                  touched.profileCountry &&\r\n                                  Boolean(errors.profileCountry)\r\n                                }\r\n                                fullWidth\r\n                              >\r\n                                <TextField\r\n                                  InputProps={{\r\n                                    startAdornment:\r\n                                      touched.profileCountry &&\r\n                                      Boolean(errors.profileCountry) ? (\r\n                                        <InputAdornment position=\"start\">\r\n                                          <PublicIcon\r\n                                            style={{ color: \"red\" }}\r\n                                          />\r\n                                        </InputAdornment>\r\n                                      ) : (\r\n                                        <InputAdornment position=\"start\">\r\n                                          <PublicIcon />\r\n                                        </InputAdornment>\r\n                                      ),\r\n                                  }}\r\n                                  variant=\"outlined\"\r\n                                  fullWidth\r\n                                  name=\"profileCountry\"\r\n                                  label=\"Country\"\r\n                                  id=\"profileCountry\"\r\n                                  defaultValue={profile.profileCountry}\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                />\r\n                              </FormControl>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12}>\r\n                              <FormControl\r\n                                error={\r\n                                  touched.facebook && Boolean(errors.facebook)\r\n                                }\r\n                                fullWidth\r\n                              >\r\n                                <TextField\r\n                                  InputProps={{\r\n                                    startAdornment:\r\n                                      touched.facebook &&\r\n                                      Boolean(errors.facebook) ? (\r\n                                        <InputAdornment position=\"start\">\r\n                                          <FacebookIcon\r\n                                            style={{ color: \"red\" }}\r\n                                          />\r\n                                        </InputAdornment>\r\n                                      ) : (\r\n                                        <InputAdornment position=\"start\">\r\n                                          <FacebookIcon />\r\n                                        </InputAdornment>\r\n                                      ),\r\n                                  }}\r\n                                  variant=\"outlined\"\r\n                                  fullWidth\r\n                                  name=\"facebook\"\r\n                                  label=\"facebook\"\r\n                                  id=\"facebook\"\r\n                                  defaultValue={profile.facebook}\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                />\r\n                              </FormControl>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12}>\r\n                              <FormControl\r\n                                error={touched.github && Boolean(errors.github)}\r\n                                fullWidth\r\n                              >\r\n                                <TextField\r\n                                  InputProps={{\r\n                                    startAdornment:\r\n                                      touched.github &&\r\n                                      Boolean(errors.github) ? (\r\n                                        <InputAdornment position=\"start\">\r\n                                          <GitHubIcon\r\n                                            style={{ color: \"red\" }}\r\n                                          />\r\n                                        </InputAdornment>\r\n                                      ) : (\r\n                                        <InputAdornment position=\"start\">\r\n                                          <GitHubIcon />\r\n                                        </InputAdornment>\r\n                                      ),\r\n                                  }}\r\n                                  variant=\"outlined\"\r\n                                  fullWidth\r\n                                  name=\"github\"\r\n                                  label=\"Github\"\r\n                                  id=\"github\"\r\n                                  defaultValue={profile.github}\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                />\r\n                              </FormControl>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12}>\r\n                              <FormControl\r\n                                error={\r\n                                  touched.twitter && Boolean(errors.twitter)\r\n                                }\r\n                                fullWidth\r\n                              >\r\n                                <TextField\r\n                                  InputProps={{\r\n                                    startAdornment:\r\n                                      touched.twitter &&\r\n                                      Boolean(errors.twitter) ? (\r\n                                        <InputAdornment position=\"start\">\r\n                                          <TwitterIcon\r\n                                            style={{ color: \"red\" }}\r\n                                          />\r\n                                        </InputAdornment>\r\n                                      ) : (\r\n                                        <InputAdornment position=\"start\">\r\n                                          <TwitterIcon />\r\n                                        </InputAdornment>\r\n                                      ),\r\n                                  }}\r\n                                  variant=\"outlined\"\r\n                                  fullWidth\r\n                                  name=\"twitter\"\r\n                                  label=\"Twitter\"\r\n                                  id=\"twitter\"\r\n                                  defaultValue={profile.twitter}\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                />\r\n                              </FormControl>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12}>\r\n                              <FormControl\r\n                                error={\r\n                                  touched.linkedin && Boolean(errors.linkedin)\r\n                                }\r\n                                fullWidth\r\n                              >\r\n                                <TextField\r\n                                  InputProps={{\r\n                                    startAdornment:\r\n                                      touched.linkedin &&\r\n                                      Boolean(errors.linkedin) ? (\r\n                                        <InputAdornment position=\"start\">\r\n                                          <LinkedInIcon\r\n                                            style={{ color: \"red\" }}\r\n                                          />\r\n                                        </InputAdornment>\r\n                                      ) : (\r\n                                        <InputAdornment position=\"start\">\r\n                                          <LinkedInIcon />\r\n                                        </InputAdornment>\r\n                                      ),\r\n                                  }}\r\n                                  variant=\"outlined\"\r\n                                  fullWidth\r\n                                  name=\"linkedin\"\r\n                                  label=\"Linkedin\"\r\n                                  id=\"linkedin\"\r\n                                  defaultValue={profile.linkedin}\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                />\r\n                              </FormControl>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12}>\r\n                              <FormControl\r\n                                error={\r\n                                  touched.profileWebsite &&\r\n                                  Boolean(errors.profileWebsite)\r\n                                }\r\n                                fullWidth\r\n                              >\r\n                                <TextField\r\n                                  InputProps={{\r\n                                    startAdornment:\r\n                                      touched.profileWebsite &&\r\n                                      Boolean(errors.profileWebsite) ? (\r\n                                        <InputAdornment position=\"start\">\r\n                                          <LanguageIcon\r\n                                            style={{ color: \"red\" }}\r\n                                          />\r\n                                        </InputAdornment>\r\n                                      ) : (\r\n                                        <InputAdornment position=\"start\">\r\n                                          <LanguageIcon />\r\n                                        </InputAdornment>\r\n                                      ),\r\n                                  }}\r\n                                  variant=\"outlined\"\r\n                                  fullWidth\r\n                                  name=\"profileWebsite\"\r\n                                  label=\"Website\"\r\n                                  id=\"profileWebsite\"\r\n                                  defaultValue={profile.profileWebsite}\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                />\r\n                              </FormControl>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                              <FormControl\r\n                                error={\r\n                                  touched.profileAboutMe &&\r\n                                  Boolean(errors.profileAboutMe)\r\n                                }\r\n                                fullWidth\r\n                                color=\"primary\"\r\n                              >\r\n                                <TextareaAutosize\r\n                                  variant=\"outlined\"\r\n                                  className={classes.ScuiTextAreaMedium}\r\n                                  rowsMin={12}\r\n                                  aria-label=\"maximum height\"\r\n                                  placeholder=\"Tell me about yourself. max 99 words\"\r\n                                  name=\"profileAboutMe\"\r\n                                  id=\"profileAboutMe\"\r\n                                  defaultValue={profile.profileAboutMe}\r\n                                  onChange={handleChange}\r\n                                  onBlur={handleBlur}\r\n                                />\r\n                              </FormControl>\r\n                            </Grid>\r\n                          </Grid>\r\n                        </CardContent>\r\n\r\n                        <Divider className={classes.ScuiDividerTB8} />\r\n                        <CardContent>\r\n                          <Grid item xs={12} className={classes.ScuiGridFooter}>\r\n                            <Typography variant=\"h6\">\r\n                              <Link\r\n                                to={\"/dashboard\"}\r\n                                className={classes.ScuiLinkUnderLineRemove}\r\n                              >\r\n                                Not now\r\n                              </Link>\r\n                            </Typography>\r\n                            <Button\r\n                              type=\"submit\"\r\n                              variant=\"contained\"\r\n                              color=\"primary\"\r\n                            >\r\n                              <Typography variant=\"h5\">Update Now</Typography>\r\n                            </Button>\r\n                          </Grid>\r\n                        </CardContent>\r\n                      </Form>\r\n                    );\r\n                  }}\r\n                </Formik>\r\n              </Card>\r\n            </Paper>\r\n          </Box>\r\n        </Grid>\r\n      ) : (\r\n        <Grid item xs={12} xl={6} lg={8} md={8} sm={10}>\r\n          {\" \"}\r\n          <Box\r\n            className={clsx({\r\n              [classes.ScuiMiddle]: true,\r\n              [classes.ScuiBoxFullHeight]: true,\r\n            })}\r\n          >\r\n            <CircularProgress color=\"secondary\" />\r\n          </Box>\r\n        </Grid>\r\n      )}\r\n      <Grid item xs={false} xl={3} lg={2} md={2} sm={1} />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default withWidth()(withStyles(MuiDistributor)(ProfileSetting));\r\n","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\AccountSetting\\AccountSetting.js",["400","401","402","403","404","405","406"],"import React, { useState, useRef } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { Formik, Form } from \"formik\";\r\n// #firebase :\r\nimport app, { stroage } from \"../../firebase\";\r\n\r\n// #contexts :\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\n\r\n// #components :\r\n\r\n// #hooks :\r\nimport { useSnackbar } from \"notistack\";\r\n\r\n// #validations :\r\nimport { validationSchema } from \"./AccountSettingFormValidation\";\r\n\r\n// #material-ui :\r\nimport clsx from \"clsx\";\r\nimport withWidth, { isWidthUp } from \"@material-ui/core/withWidth\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { MuiDistributor } from \"../../muiTheme/MuiDistributor\";\r\nimport {\r\n  FormControl,\r\n  InputAdornment,\r\n  Grid,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Divider,\r\n  Typography,\r\n  Button,\r\n  Input,\r\n  CardMedia,\r\n  CssBaseline,\r\n  Paper,\r\n  Box,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport EmailIcon from \"@material-ui/icons/Email\";\r\nimport LockIcon from \"@material-ui/icons/Lock\";\r\nimport FaceIcon from \"@material-ui/icons/Face\";\r\nimport AddPhotoAlternateIcon from \"@material-ui/icons/AddPhotoAlternate\";\r\n\r\nconst AccountSetting = (props) => {\r\n  const { classes, width } = props;\r\n  const {\r\n    currentUser,\r\n    updateEmail,\r\n    updatePassword,\r\n    updateDisplayName,\r\n    updateProfilePhoto,\r\n  } = useAuth();\r\n  const history = useHistory();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [loading, setLoading] = useState(false);\r\n  const [profilePhoto, setProfilePhoto] = useState(null);\r\n  const [open, setOpen] = useState(false);\r\n  const [previewProfilePhoto, setPreviewProfilePhoto] = useState(null);\r\n\r\n  const imp = useRef();\r\n\r\n  // #handlers : update account setting\r\n\r\n  const initialValues = {\r\n    displayName: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n  };\r\n\r\n  const handlePhotoUpload = (e) => {\r\n    if (e.target.files[0]) {\r\n      setProfilePhoto(e.target.files[0]);\r\n      setPreviewProfilePhoto(URL.createObjectURL(e.target.files[0]));\r\n    }\r\n  };\r\n\r\n  const onSubmit = async (values, { resetForm }) => {\r\n    const { displayName, email, password } = values;\r\n\r\n    const promises = [];\r\n    setLoading(true);\r\n\r\n    if (email) {\r\n      promises.push(updateEmail(email));\r\n    }\r\n    if (password) {\r\n      promises.push(updatePassword(password));\r\n    }\r\n    if (displayName) {\r\n      promises.push(updateDisplayName(displayName));\r\n    }\r\n    if (profilePhoto) {\r\n      const db = app.firestore();\r\n\r\n      if (currentUser.photoURL) {\r\n        let oldImage = stroage.refFromURL(currentUser.photoURL);\r\n        oldImage.delete();\r\n      }\r\n\r\n      const uploadTask = stroage\r\n        .ref(`profilePhoto/${profilePhoto.name}`)\r\n        .put(profilePhoto);\r\n      uploadTask.on(\r\n        \"state_changed\",\r\n        (snapshot) => {},\r\n        (error) => {\r\n          enqueueSnackbar(\"Something went wrong while uploading photo\", {\r\n            variant: \"error\",\r\n          });\r\n        },\r\n        () => {\r\n          stroage\r\n            .ref(\"profilePhoto\")\r\n            .child(profilePhoto.name)\r\n            .getDownloadURL()\r\n            .then((url) => {\r\n              if (url) {\r\n                promises.push(updateProfilePhoto(url));\r\n              } else {\r\n                enqueueSnackbar(\"Something went wrong while updating photo\", {\r\n                  variant: \"error\",\r\n                });\r\n              }\r\n            });\r\n        }\r\n      );\r\n    }\r\n\r\n    Promise.all(promises)\r\n      .then(() => {\r\n        enqueueSnackbar(\"Account updated successfully\", {\r\n          variant: \"success\",\r\n        });\r\n        history.push(\"/dashboard\");\r\n      })\r\n      .catch(() => {\r\n        enqueueSnackbar(\"Something went wrong : Loging again then try\", {\r\n          variant: \"error\",\r\n        });\r\n      })\r\n      .finally(() => {\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  // #handlers : modal close\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      component=\"main\"\r\n      className={clsx(classes.ScuiMainContainer, classes.ScuiBackground)}\r\n    >\r\n      <CssBaseline />\r\n      <Grid item xs={false} xl={3} lg={2} md={2} sm={1} />\r\n      <Grid item xs={12} xl={6} lg={8} md={8} sm={10}>\r\n        {/* // #action : */}\r\n        <Box\r\n          className={clsx({\r\n            [classes.ScuiMiddle]: true,\r\n            [classes.ScuiBoxFullHeight]: width === \"xl\",\r\n            [classes.ScuiNone]: width === \"lg\",\r\n          })}\r\n        >\r\n          <Paper className={classes.ScuiPaperLarge}>\r\n            <Card className={classes.ScuiCardLarge}>\r\n              <CardHeader\r\n                title={<Typography variant=\"h2\">Account Settings</Typography>}\r\n                subheader={\r\n                  <Typography variant=\"h4\" color=\"secondary\">\r\n                    Want to update profile settings ?\r\n                    <Link\r\n                      to={\"/profilesettings\"}\r\n                      className={classes.ScuiLinkUnderLineRemove}\r\n                    >\r\n                      Profile Settings\r\n                    </Link>\r\n                  </Typography>\r\n                }\r\n              />\r\n              <Divider className={classes.ScuiDividerT24} />\r\n              {/* // #action : */}\r\n              <Formik\r\n                initialValues={initialValues}\r\n                validationSchema={validationSchema}\r\n                onSubmit={onSubmit}\r\n                validateOnChange={false}\r\n                validateOnBlur={false}\r\n              >\r\n                {(props) => {\r\n                  const {\r\n                    values,\r\n                    touched,\r\n                    errors,\r\n                    handleChange,\r\n                    handleBlur,\r\n                  } = props;\r\n                  return (\r\n                    <Form>\r\n                      <CardContent className={classes.ScuiCardLargeMainArea}>\r\n                        <Grid container spacing={2}>\r\n                          {previewProfilePhoto ? (\r\n                            <Grid item xs={12}>\r\n                              <Link>\r\n                                <Card className={classes.ScuiAvaterLargeCard}>\r\n                                  <CardMedia\r\n                                    component=\"img\"\r\n                                    alt=\"Contemplative Reptile\"\r\n                                    image={previewProfilePhoto}\r\n                                    onClick={() => imp.current.click()}\r\n                                    className={classes.ScuiAvaterLarge}\r\n                                  />\r\n                                </Card>\r\n                              </Link>\r\n                            </Grid>\r\n                          ) : (\r\n                            <Grid item xs={12}>\r\n                              <Button\r\n                                variant=\"outlined\"\r\n                                onClick={() => imp.current.click()}\r\n                                className={classes.ScuiAvaterLargeButton}\r\n                              >\r\n                                <AddPhotoAlternateIcon />\r\n                                <Typography\r\n                                  style={{\r\n                                    marginLeft: \"3px\",\r\n                                    marginRight: \"5px\",\r\n                                  }}\r\n                                >\r\n                                  Choose\r\n                                </Typography>\r\n                              </Button>\r\n                            </Grid>\r\n                          )}\r\n\r\n                          <Grid item xs={12}>\r\n                            <FormControl\r\n                              error={\r\n                                touched.displayName &&\r\n                                Boolean(errors.displayName)\r\n                              }\r\n                              fullWidth\r\n                            >\r\n                              <TextField\r\n                                InputProps={{\r\n                                  startAdornment:\r\n                                    touched.displayName &&\r\n                                    Boolean(errors.displayName) ? (\r\n                                      <InputAdornment position=\"start\">\r\n                                        <FaceIcon style={{ color: \"red\" }} />\r\n                                      </InputAdornment>\r\n                                    ) : (\r\n                                      <InputAdornment position=\"start\">\r\n                                        <FaceIcon />\r\n                                      </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                                autoComplete=\"displayName\"\r\n                                name=\"displayName\"\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                id=\"displayName\"\r\n                                label=\"displayName\"\r\n                                defaultValue={currentUser.displayName}\r\n                                /* value={values.displayName} */\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                            </FormControl>\r\n                          </Grid>\r\n                          <Grid item xs={12}>\r\n                            <FormControl\r\n                              error={touched.email && Boolean(errors.email)}\r\n                              fullWidth\r\n                            >\r\n                              <TextField\r\n                                InputProps={{\r\n                                  startAdornment:\r\n                                    touched.email && Boolean(errors.email) ? (\r\n                                      <InputAdornment position=\"start\">\r\n                                        <EmailIcon style={{ color: \"red\" }} />\r\n                                      </InputAdornment>\r\n                                    ) : (\r\n                                      <InputAdornment position=\"start\">\r\n                                        <EmailIcon />\r\n                                      </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                                autoComplete=\"email\"\r\n                                name=\"email\"\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                id=\"email\"\r\n                                label=\"Email Address\"\r\n                                defaultValue={currentUser.email}\r\n                                /* value={values.email} */\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                            </FormControl>\r\n                          </Grid>\r\n                          <Grid item xs={12}>\r\n                            <FormControl\r\n                              error={\r\n                                touched.password && Boolean(errors.password)\r\n                              }\r\n                              fullWidth\r\n                            >\r\n                              <TextField\r\n                                InputProps={{\r\n                                  startAdornment:\r\n                                    touched.password &&\r\n                                    Boolean(errors.password) ? (\r\n                                      <InputAdornment position=\"start\">\r\n                                        <LockIcon style={{ color: \"red\" }} />\r\n                                      </InputAdornment>\r\n                                    ) : (\r\n                                      <InputAdornment position=\"start\">\r\n                                        <LockIcon />\r\n                                      </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                name=\"password\"\r\n                                label=\"Password\"\r\n                                type=\"password\"\r\n                                id=\"password\"\r\n                                value={values.password}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                              />\r\n                            </FormControl>\r\n                          </Grid>\r\n                          <Grid item xs={12}>\r\n                            <FormControl fullWidth>\r\n                              <Input\r\n                                inputProps={{\r\n                                  className: classes.UpInput,\r\n                                  ref: imp,\r\n                                }}\r\n                                name=\"profilePhoto\"\r\n                                label=\"profilePhoto\"\r\n                                type=\"file\"\r\n                                id=\"profilePhoto\"\r\n                                style={{ visibility: \"hidden\" }}\r\n                                onChange={handlePhotoUpload}\r\n                              />\r\n                            </FormControl>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </CardContent>\r\n\r\n                      <Divider className={classes.ScuiDividerTB8} />\r\n                      <CardContent>\r\n                        <Grid item xs={12} className={classes.ScuiGridFooter}>\r\n                          <Typography variant=\"h6\">\r\n                            <Link\r\n                              to={\"/dashboard\"}\r\n                              className={classes.ScuiLinkUnderLineRemove}\r\n                            >\r\n                              Not now\r\n                            </Link>\r\n                          </Typography>\r\n                          <Button\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                          >\r\n                            <Typography variant=\"h5\">Update Now</Typography>\r\n                          </Button>\r\n                        </Grid>\r\n                      </CardContent>\r\n                    </Form>\r\n                  );\r\n                }}\r\n              </Formik>\r\n            </Card>\r\n          </Paper>\r\n        </Box>\r\n      </Grid>\r\n      <Grid item xs={false} xl={3} lg={2} md={2} sm={1} />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default withWidth()(withStyles(MuiDistributor)(AccountSetting));\r\n",["407","408"],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Blog\\Sort.js",["409","410","411"],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Profile\\muiMiniCard.js",[],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Blog\\BlogsCommentsCard.js",["412"],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Profile\\muiFeaturedSkill.js",[],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Blog\\CreateBlog.js",["413","414"],"import React, { useState, useRef } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\n// #firebase :\r\nimport app, { stroage } from \"../../firebase\";\r\n\r\n// #contexts :\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\n\r\n// #components :\r\n\r\n// #hooks :\r\nimport { useSnackbar } from \"notistack\";\r\n\r\n// #validations :\r\n\r\n// #material-ui :\r\nimport clsx from \"clsx\";\r\nimport withWidth, { isWidthUp } from \"@material-ui/core/withWidth\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { MuiDistributor } from \"../../muiTheme/MuiDistributor\";\r\nimport {\r\n  FormControl,\r\n  InputAdornment,\r\n  Grid,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Divider,\r\n  Typography,\r\n  Button,\r\n  Input,\r\n  TextareaAutosize,\r\n  Paper,\r\n  GridList,\r\n  GridListTile,\r\n  CardMedia,\r\n  Box,\r\n  Toolbar,\r\n  IconButton,\r\n  TextField,\r\n  CssBaseline,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport TitleIcon from \"@material-ui/icons/Title\";\r\nimport AddAPhotoIcon from \"@material-ui/icons/AddAPhoto\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport BackupIcon from \"@material-ui/icons/Backup\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nconst CreateBlog = (props) => {\r\n  const { currentUser } = useAuth();\r\n  const { classes, handleCreateBlogModelClose, width } = props;\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [blogPhotos, setBlogPhotos] = useState([]);\r\n  const [blogPhotosURL, setBlogPhotosURL] = useState([]);\r\n  const [previewBlogPhotos, setPreviewBlogPhoto] = useState([]);\r\n  const [photoUploading, setPhotoUploading] = useState(false);\r\n  const [isPhotoUp, setIsPhotoUp] = useState(false);\r\n  const [blogBody, setBlogBody] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const imp = useRef();\r\n\r\n  // #handlers : Photo Select\r\n  const handlePhotoSelect = (e) => {\r\n    setLoading(true);\r\n    if (e.target.files) {\r\n      let file = e.target.files;\r\n      let preview = [];\r\n      for (let i = 0; i < file.length; i++) {\r\n        preview.push(URL.createObjectURL(file[i]));\r\n        setBlogPhotos((cv) => [...cv, file[i]]);\r\n      }\r\n      setPreviewBlogPhoto((cv) => [...cv, preview]);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  // #handlers : 1. Upload Photo To Storage and 2.Create New ref for every photo.\r\n\r\n  const uploadBlogPhotos = (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    const db = app.firestore();\r\n    try {\r\n      const promises = [];\r\n      blogPhotos.map((file) => {\r\n        const uploadTask = stroage\r\n          .ref(`blogs/${Math.floor(Math.random() * 1000000000) + file.name}`)\r\n          .put(file);\r\n        promises.push(uploadTask);\r\n        uploadTask.on(\r\n          \"state_changed\",\r\n          (snapshot) => {\r\n            setPhotoUploading(true);\r\n          },\r\n          (error) => {\r\n            throw new Error(\"Something went wrong while uplaoding photo\");\r\n          },\r\n          async () => {\r\n            const downloadURL = await uploadTask.snapshot.ref.getDownloadURL();\r\n            const img = new Image();\r\n            img.onload = async () => {\r\n              const height = img.height;\r\n              const width = img.width;\r\n              const newPhoto = {\r\n                blogPhotoID: uuidv4(),\r\n                blogPhotoCreatedAt: new Date().toISOString(),\r\n                blogPhoto: downloadURL,\r\n                blogPhotoHeight: height,\r\n                blogPhotoWidth: width,\r\n              };\r\n\r\n              setBlogPhotosURL((cv) => [...cv, newPhoto]);\r\n              await db\r\n                .doc(`blogPhotos/${newPhoto.blogPhotoID}`)\r\n                .set(newPhoto)\r\n                .catch(() => {\r\n                  throw new Error(\"Some of photos maybe not uploading\");\r\n                });\r\n            };\r\n            img.src = downloadURL;\r\n          }\r\n        );\r\n      });\r\n      Promise.all(promises)\r\n        .then(() => {\r\n          setPhotoUploading(false);\r\n          enqueueSnackbar(\"Photos Uploaded successfully\", {\r\n            variant: \"success\",\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          // throw new Error(\"Something went worng\");\r\n          enqueueSnackbar(error.message, {\r\n            variant: \"error\",\r\n          });\r\n        })\r\n        .finally(() => {\r\n          setIsPhotoUp(true);\r\n          setLoading(false);\r\n        });\r\n    } catch (error) {\r\n      enqueueSnackbar(error.message, {\r\n        variant: \"error\",\r\n      });\r\n    }\r\n  };\r\n\r\n  // #handlers : Create Blog with uploaded photos\r\n\r\n  const createBlogPost = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n\r\n    const db = app.firestore();\r\n\r\n    try {\r\n      const blogPost = {\r\n        blogPostID: uuidv4(),\r\n        blogCreatorID: currentUser.uid,\r\n        blogCreatorDisplayName: currentUser.displayName,\r\n        blogCreatorPhotoUrl: currentUser.photoURL,\r\n        blogBody: blogBody,\r\n        blogPhotos: blogPhotosURL,\r\n        //sort\r\n        blogPostCreatedAt: new Date().toISOString(),\r\n        blogPostLikeCount: 0,\r\n        blogPostCommentCount: 0,\r\n      };\r\n\r\n      await db\r\n        .doc(`blogs/${blogPost.blogPostID}`)\r\n        .set(blogPost)\r\n        .then(() => {\r\n          enqueueSnackbar(\"New Blod posted\", {\r\n            variant: \"success\",\r\n          });\r\n        })\r\n        .catch(() => console.log(\"error error\"))\r\n        .finally(() => {\r\n          setLoading(false);\r\n          handleCreateBlogModelClose(false);\r\n        });\r\n    } catch (error) {\r\n      enqueueSnackbar(\"Something went wrong\", {\r\n        variant: \"error\",\r\n      });\r\n    }\r\n  };\r\n\r\n  // #handlers : Cancel blog post\r\n  const cancelBlogPost = async () => {\r\n    if (blogPhotosURL.length > 0) {\r\n      blogPhotosURL.forEach(async (photo) => {\r\n        let oldImage = stroage.refFromURL(photo.blogPhoto);\r\n        await oldImage.delete();\r\n      });\r\n      handleCreateBlogModelClose(false);\r\n    } else {\r\n      handleCreateBlogModelClose(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      component=\"main\"\r\n      className={clsx(classes.ScuiMainContainer, classes.ScuiModalBG)}\r\n    >\r\n      <CssBaseline />\r\n      <Grid item xs={12} xl={12} lg={12} md={12} sm={12}>\r\n        <Box>\r\n          <Toolbar className={classes.ScuiModalClose}>\r\n            <IconButton onClick={() => handleCreateBlogModelClose(false)}>\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </Toolbar>\r\n        </Box>\r\n      </Grid>\r\n      <Grid item xs={false} xl={3} md={2} sm={1} />\r\n      <Grid item xs={12} xl={6} lg={8} md={8} sm={10}>\r\n        <Box\r\n          className={clsx({\r\n            [classes.ScuiMiddle]: true,\r\n            [classes.ScuiBoxFullHeight]: width === \"xl\",\r\n            [classes.ScuiCenter]: width === \"lg\",\r\n          })}\r\n        >\r\n          <Paper className={classes.ScuiPaperLarge}>\r\n            <Card className={classes.ScuiCardLarge}>\r\n              <CardHeader\r\n                title={\r\n                  <Typography variant=\"h2\">Whats in your Mind ?</Typography>\r\n                }\r\n                subheader={\r\n                  <Typography variant=\"h4\" color=\"secondary\">\r\n                    Unleash your imaginations\r\n                  </Typography>\r\n                }\r\n              />\r\n              <Divider className={classes.ScuiDividerT24} />\r\n              {/* // #action : */}\r\n              <CardContent className={classes.ScuiCardLargeMainArea}>\r\n                <form noValidate>\r\n                  <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                      <FormControl error fullWidth>\r\n                        <TextField\r\n                          InputProps={{\r\n                            startAdornment: (\r\n                              <InputAdornment position=\"start\">\r\n                                <TitleIcon />\r\n                              </InputAdornment>\r\n                            ),\r\n                          }}\r\n                          label=\"Title\"\r\n                          variant=\"outlined\"\r\n                          id=\"custom-css-outlined-input\"\r\n                        />\r\n                      </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <FormControl error fullWidth>\r\n                        <TextareaAutosize\r\n                          className={classes.ScuiTextAreaLarge}\r\n                          label=\"Blog Body\"\r\n                          variant=\"outlined\"\r\n                          id=\"custom-css-outlined-input\"\r\n                          rowsMin={13}\r\n                          aria-label=\"maximum height\"\r\n                          placeholder=\"Give me a nice cool review\"\r\n                          defaultValue=\"\"\r\n                          onChange={(e) => {\r\n                            setBlogBody(e.target.value);\r\n                          }}\r\n                        />\r\n                      </FormControl>\r\n                    </Grid>\r\n\r\n                    {/* // #action : */}\r\n\r\n                    {previewBlogPhotos.length > 0 && !loading === true ? (\r\n                      <Grid item xs={12} className={classes.ScuiPreviewArea}>\r\n                        <GridList\r\n                          cellHeight={120}\r\n                          spacing={0}\r\n                          cols={width === \"xs\" ? 1 : 5}\r\n                        >\r\n                          {previewBlogPhotos.map((pc) => (\r\n                            <GridListTile cols={1} spacing={0}>\r\n                              <Link>\r\n                                <Card className={classes.ScuiCardPreviewPhoto}>\r\n                                  <CardMedia\r\n                                    component=\"img\"\r\n                                    alt=\"Contemplative Reptile\"\r\n                                    image={pc}\r\n                                    className={classes.ScuiPreviewPhoto}\r\n                                  />\r\n                                </Card>\r\n                              </Link>\r\n                            </GridListTile>\r\n                          ))}\r\n\r\n                          {!isPhotoUp && (\r\n                            <AddIcon\r\n                              onClick={() => imp.current.click()}\r\n                              className={classes.ScuiAddIcon}\r\n                            />\r\n                          )}\r\n                        </GridList>\r\n                      </Grid>\r\n                    ) : !loading === true ? (\r\n                      <Grid item xs={12}>\r\n                        <Box\r\n                          className={clsx(\r\n                            classes.ScuiChoosePhotoGridAreaMedium,\r\n                            classes.ScuiChoosePhotoGrid\r\n                          )}\r\n                        >\r\n                          <Button\r\n                            onClick={() => imp.current.click()}\r\n                            startIcon={<AddAPhotoIcon />}\r\n                          >\r\n                            <Typography variant=\"h4\" color=\"secondary\">\r\n                              Choose Photos\r\n                            </Typography>\r\n                          </Button>\r\n                        </Box>\r\n                      </Grid>\r\n                    ) : null}\r\n\r\n                    {/* // #action : */}\r\n\r\n                    {blogPhotos.length > 0 &&\r\n                    !isPhotoUp === true &&\r\n                    photoUploading === false ? (\r\n                      <Grid item xs={12}>\r\n                        <Box\r\n                          className={clsx(\r\n                            classes.ScuiChoosePhotoGrid,\r\n                            classes.ScuiChoosePhotoGridAreaSmall\r\n                          )}\r\n                        >\r\n                          <Button\r\n                            disabled={blogPhotos.length === 0 && isPhotoUp}\r\n                            onClick={uploadBlogPhotos}\r\n                            startIcon={<BackupIcon />}\r\n                          >\r\n                            <Typography variant=\"h4\" color=\"secondary\">\r\n                              Upload Photo\r\n                            </Typography>\r\n                          </Button>\r\n                        </Box>\r\n                      </Grid>\r\n                    ) : photoUploading === true ? (\r\n                      <Grid item xs={12}>\r\n                        <Box\r\n                          className={clsx(\r\n                            classes.ScuiChoosePhotoGrid,\r\n                            classes.ScuiChoosePhotoGridAreaSmall\r\n                          )}\r\n                        >\r\n                          <CircularProgress />\r\n                        </Box>\r\n                      </Grid>\r\n                    ) : null}\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <FormControl fullWidth>\r\n                      <Input\r\n                        inputProps={{\r\n                          className: classes.UpInput,\r\n                          ref: imp,\r\n                          multiple: true,\r\n                        }}\r\n                        required\r\n                        name=\"blogPhotos\"\r\n                        label=\"blogPhotos\"\r\n                        type=\"file\"\r\n                        id=\"blogPhotos\"\r\n                        style={{ visibility: \"hidden\" }}\r\n                        onChange={handlePhotoSelect}\r\n                      />\r\n                    </FormControl>\r\n                  </Grid>\r\n                </form>\r\n              </CardContent>\r\n              <Divider className={classes.ScuiDividerTB8} />\r\n              {/* // #action : */}\r\n              <CardContent>\r\n                <Grid item xs={12} className={classes.ScuiGridFooter}>\r\n                  <Typography variant=\"h6\" onClick={cancelBlogPost}>\r\n                    <Link\r\n                      to={\"/dashboard\"}\r\n                      className={classes.ScuiLinkUnderLineRemove}\r\n                    >\r\n                      Not now\r\n                    </Link>\r\n                  </Typography>\r\n\r\n                  <Button\r\n                    /* type=\"submit\" */\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={createBlogPost}\r\n                    disabled={\r\n                      (blogPhotos.length > 0 && !isPhotoUp) || !blogBody\r\n                    }\r\n                  >\r\n                    <Typography variant=\"h5\">Unleash</Typography>\r\n                  </Button>\r\n                </Grid>\r\n              </CardContent>\r\n            </Card>\r\n          </Paper>\r\n        </Box>\r\n      </Grid>\r\n      <Grid item xs={false} xl={3} md={2} sm={1} />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default withWidth()(withStyles(MuiDistributor)(CreateBlog));\r\n","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Gallery\\CreateGallery.js",["415","416"],"import React, { useState, useRef } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n// #firebase :\r\nimport app, { stroage } from \"../../firebase\";\r\n\r\n// #contexts :\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\n\r\n// #components :\r\n\r\n// #hooks :\r\nimport { useSnackbar } from \"notistack\";\r\n\r\n// #validations :\r\n\r\n// #material-ui :\r\nimport clsx from \"clsx\";\r\nimport withWidth, { isWidthUp } from \"@material-ui/core/withWidth\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { MuiDistributor } from \"../../muiTheme/MuiDistributor\";\r\n// import addlogo from \"../../assets/add.jpg\";\r\nimport {\r\n  FormControl,\r\n  InputAdornment,\r\n  Grid,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Divider,\r\n  Typography,\r\n  Button,\r\n  Input,\r\n  Paper,\r\n  GridList,\r\n  GridListTile,\r\n  CardMedia,\r\n  Box,\r\n  Toolbar,\r\n  IconButton,\r\n  TextField,\r\n  CssBaseline,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport TitleIcon from \"@material-ui/icons/Title\";\r\nimport AddAPhotoIcon from \"@material-ui/icons/AddAPhoto\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nconst CreateGallery = (props) => {\r\n  const { currentUser } = useAuth();\r\n  const { classes, handleCreateGalleryModelClose, width } = props;\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [blogPhotos, setBlogPhotos] = useState([]);\r\n  const [previewBlogPhotos, setPreviewBlogPhoto] = useState([]);\r\n  const [galleryPhotoCaption, setGalleryPhotoCaption] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [photoUploading, setPhotoUploading] = useState(false);\r\n  const imp = useRef();\r\n\r\n  // #handlers : Hangle images selected\r\n\r\n  const handlePhotoUpload = (e) => {\r\n    setLoading(true);\r\n    if (e.target.files) {\r\n      let file = e.target.files;\r\n      let preview = [];\r\n      for (let i = 0; i < file.length; i++) {\r\n        preview.push(URL.createObjectURL(file[i]));\r\n\r\n        setBlogPhotos((cv) => [...cv, file[i]]);\r\n      }\r\n      setPreviewBlogPhoto((cv) => [...cv, preview]);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  // #handlers : Uploading image to stroage and create a 'ref dcoument' for every image\r\n\r\n  const uploadGalleryPhotos = (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    try {\r\n      const promises = [];\r\n      blogPhotos.map((file) => {\r\n        const db = app.firestore();\r\n        const uploadTask = stroage\r\n          .ref(\r\n            `galleryPhoto/${Math.floor(Math.random() * 1000000000) + file.name}`\r\n          )\r\n          .put(file);\r\n        promises.push(uploadTask);\r\n        uploadTask.on(\r\n          \"state_changed\",\r\n          (snapshot) => {\r\n            // progress\r\n            setPhotoUploading(true);\r\n          },\r\n          (error) => {\r\n            throw new Error(\"Something went wrong while uplaoding photo\");\r\n          },\r\n          async () => {\r\n            const downloadURL = await uploadTask.snapshot.ref.getDownloadURL();\r\n            const img = new Image();\r\n            img.onload = async () => {\r\n              const height = img.height;\r\n              const width = img.width;\r\n              const newPhoto = {\r\n                galleryPhotoID: uuidv4(),\r\n                galleryPhotoCreatorID: currentUser.uid,\r\n                galleryPhoto: downloadURL,\r\n                galleryPhotoHeight: height,\r\n                galleryPhotoWidth: width,\r\n                galleryPhotoCaption: galleryPhotoCaption,\r\n                //need for sort data\r\n                galleryPhotoCreatedAt: new Date().toISOString(),\r\n                galleryPhotoLikeCount: 0,\r\n                galleryPhotoCommentCount: 0,\r\n              };\r\n              await db\r\n                .doc(`galleries/${newPhoto.galleryPhotoID}`)\r\n                .set(newPhoto)\r\n                .catch(() => {\r\n                  throw new Error(\"Some of photos maybe not uploading\");\r\n                });\r\n            };\r\n\r\n            img.src = downloadURL;\r\n          }\r\n        );\r\n      });\r\n\r\n      Promise.all(promises)\r\n        .then(() => {\r\n          enqueueSnackbar(\"Photos Uploaded successfully\", {\r\n            variant: \"success\",\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          throw new Error(\"Something went wrong\");\r\n        })\r\n        .finally(() => {\r\n          setPhotoUploading(false);\r\n          handleCreateGalleryModelClose(false);\r\n          setLoading(false);\r\n        });\r\n    } catch (error) {\r\n      enqueueSnackbar(error.message, {\r\n        variant: \"error\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      component=\"main\"\r\n      className={clsx(classes.ScuiMainContainer, classes.ScuiModalBG)}\r\n    >\r\n      <CssBaseline />\r\n      <Grid item xs={12} xl={12} lg={12} md={12} sm={12}>\r\n        <Box>\r\n          <Toolbar className={classes.ScuiModalClose}>\r\n            <IconButton onClick={() => handleCreateGalleryModelClose(false)}>\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </Toolbar>\r\n        </Box>\r\n      </Grid>\r\n\r\n      <Grid item xs={false} xl={3} lg={3} md={2} sm={1} />\r\n\r\n      <Grid item xs={12} xl={6} lg={6} md={8} sm={10}>\r\n        <Box\r\n          className={clsx({\r\n            [classes.ScuiMiddle]: true,\r\n            [classes.ScuiBoxFullHeight]: width === \"xl\",\r\n            [classes.ScuiCenter]: width === \"lg\",\r\n          })}\r\n        >\r\n          <Paper className={classes.ScuiPaperLarge}>\r\n            <Card className={classes.ScuiCardLarge}>\r\n              <CardHeader\r\n                title={<Typography variant=\"h2\">Memories</Typography>}\r\n                subheader={\r\n                  <Typography variant=\"h4\" color=\"secondary\">\r\n                    Share your memories with us?\r\n                  </Typography>\r\n                }\r\n              />\r\n              <Divider className={classes.ScuiDividerT24} />\r\n\r\n              <CardContent className={classes.ScuiCardLargeMainArea}>\r\n                <form noValidate>\r\n                  <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                      <FormControl error fullWidth>\r\n                        <TextField\r\n                          className={classes.margin}\r\n                          InputProps={{\r\n                            startAdornment: (\r\n                              <InputAdornment position=\"start\">\r\n                                <TitleIcon />\r\n                              </InputAdornment>\r\n                            ),\r\n                          }}\r\n                          label=\"Caption\"\r\n                          variant=\"outlined\"\r\n                          id=\"galleryPhotoCaption\"\r\n                          name=\"galleryPhotoCaption\"\r\n                          onChange={(e) => {\r\n                            setGalleryPhotoCaption(e.target.value);\r\n                          }}\r\n                        />\r\n                      </FormControl>\r\n                    </Grid>\r\n                    {previewBlogPhotos.length > 0 && !loading === true ? (\r\n                      <Grid\r\n                        item\r\n                        xs={12}\r\n                        className={classes.ScuiPreviewAreaLarge}\r\n                      >\r\n                        <GridList\r\n                          cellHeight={120}\r\n                          spacing={0}\r\n                          cols={width === \"xs\" ? 1 : 5}\r\n                        >\r\n                          {previewBlogPhotos.map((pc) => (\r\n                            <GridListTile cols={1} spacing={0}>\r\n                              <Link>\r\n                                <Card className={classes.ScuiCardPreviewPhoto}>\r\n                                  <CardMedia\r\n                                    component=\"img\"\r\n                                    alt=\"Contemplative Reptile\"\r\n                                    image={pc}\r\n                                    className={classes.ScuiPreviewPhoto}\r\n                                  />\r\n                                </Card>\r\n                              </Link>\r\n                            </GridListTile>\r\n                          ))}\r\n                          <AddIcon\r\n                            onClick={() => imp.current.click()}\r\n                            className={classes.ScuiAddIcon}\r\n                          />\r\n                        </GridList>\r\n                      </Grid>\r\n                    ) : photoUploading === true ? (\r\n                      <Grid item xs={12}>\r\n                        <Box\r\n                          className={clsx(\r\n                            classes.ScuiChoosePhotoGridAreaLarge,\r\n                            classes.ScuiChoosePhotoGrid\r\n                          )}\r\n                        >\r\n                          <CircularProgress />\r\n                        </Box>\r\n                      </Grid>\r\n                    ) : (\r\n                      <Grid item xs={12}>\r\n                        <Box\r\n                          className={clsx(\r\n                            classes.ScuiChoosePhotoGridAreaLarge,\r\n                            classes.ScuiChoosePhotoGrid\r\n                          )}\r\n                        >\r\n                          <Button\r\n                            onClick={() => imp.current.click()}\r\n                            startIcon={<AddAPhotoIcon />}\r\n                          >\r\n                            <Typography variant=\"h4\" color=\"primary\">\r\n                              Choose Photos\r\n                            </Typography>\r\n                          </Button>\r\n                        </Box>\r\n                      </Grid>\r\n                    )}\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <FormControl fullWidth>\r\n                      <Input\r\n                        inputProps={{\r\n                          className: classes.UpInput,\r\n                          ref: imp,\r\n                          multiple: true,\r\n                        }}\r\n                        required\r\n                        name=\"blogPhotos\"\r\n                        label=\"blogPhotos\"\r\n                        type=\"file\"\r\n                        id=\"blogPhotos\"\r\n                        style={{ visibility: \"hidden\" }}\r\n                        onChange={handlePhotoUpload}\r\n                      />\r\n                    </FormControl>\r\n                  </Grid>\r\n                </form>\r\n              </CardContent>\r\n\r\n              <Divider className={classes.ScuiDividerTB8} />\r\n              <CardContent>\r\n                <Grid item xs={12} className={classes.ScuiGridFooter}>\r\n                  <Typography\r\n                    variant=\"h6\"\r\n                    onClick={() => handleCreateGalleryModelClose(false)}\r\n                  >\r\n                    <Link\r\n                      to={\"/dashboard\"}\r\n                      className={classes.ScuiLinkUnderLineRemove}\r\n                    >\r\n                      Not now\r\n                    </Link>\r\n                  </Typography>\r\n                  <Button\r\n                    /* type=\"submit\" */\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    disabled={blogPhotos.length === 0}\r\n                    onClick={uploadGalleryPhotos}\r\n                  >\r\n                    <Typography variant=\"h5\">Upload Photo</Typography>\r\n                  </Button>\r\n                </Grid>\r\n              </CardContent>\r\n            </Card>\r\n          </Paper>\r\n        </Box>\r\n      </Grid>\r\n      <Grid item xs={false} xl={3} lg={3} md={2} sm={1} />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default withWidth()(withStyles(MuiDistributor)(CreateGallery));\r\n","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Profile\\FeaturedSkill.js",["417","418","419","420"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\n// #firebase :\r\nimport app, { stroage } from \"../../firebase\";\r\n\r\n// #contexts :\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\n\r\n// #hooks :\r\nimport { useSnackbar } from \"notistack\";\r\n\r\n// #material-ui :\r\nimport clsx from \"clsx\";\r\nimport withWidth, { isWidthUp } from \"@material-ui/core/withWidth\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { MuiDistributor } from \"../../muiTheme/MuiDistributor\";\r\nimport {\r\n  FormControl,\r\n  InputAdornment,\r\n  Grid,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Divider,\r\n  Typography,\r\n  Button,\r\n  Select,\r\n  InputLabel,\r\n  Paper,\r\n  Checkbox,\r\n  Box,\r\n  Toolbar,\r\n  IconButton,\r\n  TextField,\r\n  CssBaseline,\r\n} from \"@material-ui/core\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport CheckBoxOutlineBlankIcon from \"@material-ui/icons/CheckBoxOutlineBlank\";\r\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\r\nimport CategoryIcon from \"@material-ui/icons/Category\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\r\n\r\nconst FeaturedSkill = (props) => {\r\n  const { currentUser } = useAuth();\r\n  const { classes, handleCreateFeaturedSKillModelClose, width } = props;\r\n  const [loading, setLoading] = useState(false);\r\n  const [allskill, setAllskill] = useState([]);\r\n  const [platform, setPlatform] = useState(\"\");\r\n  const [selectedPlatform, setSelectedPlatforms] = useState(\"\");\r\n  const [selectedSkills, setSelectedSkills] = useState([]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"getAllSkill\");\r\n    getAllSkill();\r\n  }, []);\r\n\r\n  function getAllSkill() {\r\n    setLoading(true);\r\n    const db = app.firestore();\r\n\r\n    db.collection(\"skills\").onSnapshot((querySnapshot) => {\r\n      let items = [];\r\n\r\n      querySnapshot.forEach(\r\n        (doc) => {\r\n          items.push({\r\n            skillCoverPhoto: doc.data().skillCoverPhoto,\r\n            skillID: doc.data().skillID,\r\n            skillName: doc.data().skillName,\r\n            skillPlatform: doc.data().skillPlatform,\r\n          });\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      );\r\n      setAllskill(items);\r\n      setLoading(false);\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    setLabelWidthY(inputLabelY.current.offsetWidth);\r\n  }, []);\r\n\r\n  const [labelWidthY, setLabelWidthY] = React.useState(0);\r\n  const inputLabelY = useRef(null);\r\n  const handlePlatformChange = (event) => {\r\n    setPlatform(event.target.value);\r\n  };\r\n\r\n  const handleSubmitFeaturedSkill = async (e) => {\r\n    e.preventDefault();\r\n    const db = app.firestore();\r\n\r\n    const featureSkill = {\r\n      featureSkillID: uuidv4(),\r\n      featureSkillName: platform,\r\n      featureSkillPatform: selectedPlatform,\r\n      featureSkills: selectedSkills,\r\n    };\r\n\r\n    if (platform === \"Web Development\") {\r\n      featureSkill.featureSkillSub = \"Programing Language\";\r\n    }\r\n    if (platform === \"Cloud\") {\r\n      featureSkill.featureSkillSub = \"Cloud Service provider\";\r\n    } else {\r\n      featureSkill.featureSkillSub = \"\";\r\n    }\r\n\r\n    await db\r\n      .doc(`featuredSkills/${featureSkill.featureSkillID}`)\r\n      .set(featureSkill)\r\n      .then(() => {\r\n        console.log(\"feature Skill create success\");\r\n      })\r\n      .finally(() => {\r\n        handleCreateFeaturedSKillModelClose(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      component=\"main\"\r\n      className={clsx(classes.ScuiMainContainer, classes.ScuiModalBG)}\r\n    >\r\n      <CssBaseline />\r\n      <Grid item xs={12} xl={12} lg={12} md={12} sm={12}>\r\n        <Box>\r\n          <Toolbar className={classes.ScuiModalClose}>\r\n            <IconButton\r\n              onClick={() => handleCreateFeaturedSKillModelClose(false)}\r\n            >\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </Toolbar>\r\n        </Box>\r\n      </Grid>\r\n\r\n      <Grid item xs={false} xl={3} lg={3} md={2} sm={1} />\r\n\r\n      <Grid item xs={12} xl={6} lg={6} md={8} sm={10}>\r\n        <Box\r\n          className={clsx({\r\n            [classes.ScuiMiddle]: true,\r\n            [classes.ScuiBoxFullHeight]: width === \"xl\",\r\n            [classes.ScuiCenter]: width === \"lg\",\r\n          })}\r\n        >\r\n          <Paper className={classes.ScuiPaperLarge}>\r\n            <Card className={classes.ScuiCardLarge}>\r\n              <CardHeader\r\n                title={\r\n                  <Typography variant=\"h2\">Create Featured Skill</Typography>\r\n                }\r\n                subheader={\r\n                  <Typography variant=\"h4\" color=\"secondary\">\r\n                    Acquire new skills ? Lets share.\r\n                  </Typography>\r\n                }\r\n              />\r\n              <Divider className={classes.ScuiDividerT24} />\r\n              {/* // #action : */}\r\n              <form noValidate>\r\n                <CardContent className={classes.ScuiCardLargeMainArea}>\r\n                  <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                      <FormControl\r\n                        variant=\"outlined\"\r\n                        className={classes.ScuiSelect}\r\n                        fullWidth\r\n                        required\r\n                      >\r\n                        <InputLabel\r\n                          ref={inputLabelY}\r\n                          className={classes.focused}\r\n                          id=\"skillPlatform\"\r\n                        >\r\n                          Platform\r\n                        </InputLabel>\r\n                        <Select\r\n                          native\r\n                          labelId=\"skillPlatform\"\r\n                          id=\"skillPlatform\"\r\n                          value={platform}\r\n                          onChange={handlePlatformChange}\r\n                          labelWidth={labelWidthY}\r\n                          startAdornment={\r\n                            <InputAdornment position=\"start\">\r\n                              <CategoryIcon />\r\n                            </InputAdornment>\r\n                          }\r\n                          style={{ color: \"#132743\" }}\r\n                        >\r\n                          <option aria-label=\"None\" value=\"\" />\r\n                          <option value={\"Web Development\"}>\r\n                            Web Development\r\n                          </option>\r\n                          <option value={\"Database\"}>Database</option>\r\n                          <option value={\"Cloud\"}>Cloud</option>\r\n                          <option value={\"Web Framework\"}>Web Framework</option>\r\n                          <option value={\"Tools\"}>Tools</option>\r\n                          <option value={\"Graphic Design\"}>\r\n                            Graphic Design\r\n                          </option>\r\n                        </Select>\r\n                      </FormControl>\r\n                    </Grid>\r\n                    {/* // #action : */}\r\n                    {platform === \"Web Development\" || platform === \"Cloud\" ? (\r\n                      <Grid item xs={12}>\r\n                        <FormControl fullWidth>\r\n                          <Autocomplete\r\n                            className={classes.ScuiSelect}\r\n                            multiple\r\n                            size=\"small\"\r\n                            fullWidth\r\n                            options={allskill}\r\n                            disableCloseOnSelect\r\n                            getOptionLabel={(option) => option.skillName}\r\n                            renderOption={(option, { selected }) => (\r\n                              <>\r\n                                <Checkbox\r\n                                  icon={icon}\r\n                                  checkedIcon={checkedIcon}\r\n                                  style={{ marginRight: 8 }}\r\n                                  checked={selected}\r\n                                />\r\n                                {option.skillName}\r\n                              </>\r\n                            )}\r\n                            onChange={(event, newSelecedSkill) => {\r\n                              setSelectedPlatforms([...newSelecedSkill]);\r\n                            }}\r\n                            renderInput={(params) => (\r\n                              <TextField\r\n                                className={classes.TextNeckxx}\r\n                                {...params}\r\n                                variant=\"outlined\"\r\n                                label={\r\n                                  platform === \"Web Development\"\r\n                                    ? \"Programing Language\"\r\n                                    : platform === \"Cloud\"\r\n                                    ? \"Cloud Service provider\"\r\n                                    : null\r\n                                }\r\n                                placeholder=\"Favorites\"\r\n                              />\r\n                            )}\r\n                          />\r\n                        </FormControl>\r\n                      </Grid>\r\n                    ) : null}\r\n\r\n                    {/* // #action : */}\r\n                    <Grid item xs={12}>\r\n                      <FormControl fullWidth>\r\n                        <Autocomplete\r\n                          className={classes.ScuiSelect}\r\n                          multiple\r\n                          size=\"small\"\r\n                          fullWidth\r\n                          options={allskill}\r\n                          disableCloseOnSelect\r\n                          getOptionLabel={(option) => option.skillName}\r\n                          renderOption={(option, { selected }) => (\r\n                            <>\r\n                              <Checkbox\r\n                                icon={icon}\r\n                                checkedIcon={checkedIcon}\r\n                                style={{ marginRight: 8 }}\r\n                                checked={selected}\r\n                              />\r\n                              {option.skillName}\r\n                            </>\r\n                          )}\r\n                          onChange={(event, newSelecedSkill) => {\r\n                            setSelectedSkills([...newSelecedSkill]);\r\n                          }}\r\n                          renderInput={(params) => (\r\n                            <TextField\r\n                              className={classes.TextNeckxx}\r\n                              {...params}\r\n                              variant=\"outlined\"\r\n                              label=\"Select Skill\"\r\n                              placeholder=\"Favorites\"\r\n                            />\r\n                          )}\r\n                        />\r\n                      </FormControl>\r\n                    </Grid>\r\n                  </Grid>\r\n                </CardContent>\r\n\r\n                <Divider className={classes.ScuiDividerT24} />\r\n                {/* // #action : */}\r\n                <CardContent>\r\n                  <Grid item xs={12} className={classes.ScuiGridFooter}>\r\n                    <Typography\r\n                      variant=\"h6\"\r\n                      onClick={() => handleCreateFeaturedSKillModelClose(false)}\r\n                    >\r\n                      <Link\r\n                        to={\"/dashboard\"}\r\n                        className={classes.ScuiLinkUnderLineRemove}\r\n                      >\r\n                        Not Now\r\n                      </Link>\r\n                    </Typography>\r\n                    <Button\r\n                      /* type=\"submit\" */\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      disabled={loading}\r\n                      onClick={handleSubmitFeaturedSkill}\r\n                    >\r\n                      <Typography variant=\"h5\">Create</Typography>\r\n                    </Button>\r\n                  </Grid>\r\n                </CardContent>\r\n              </form>\r\n            </Card>\r\n          </Paper>\r\n        </Box>\r\n      </Grid>\r\n\r\n      <Grid item xs={false} xl={3} lg={3} md={2} sm={1} />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default withWidth()(withStyles(MuiDistributor)(FeaturedSkill));\r\n","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Nav\\PublicUI.js",["421","422","423"],"import React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\nimport { navMui } from \"./muiNav\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { Toolbar, Typography, Box, Grid, Button } from \"@material-ui/core\";\r\n\r\nconst PublicUI = (props) => {\r\n  const { classes } = props;\r\n\r\n  // const history = useHistory();\r\n\r\n  return (\r\n    <>\r\n      <Toolbar className={classes.toolbar}>\r\n        <Typography\r\n          variant=\"h6\"\r\n          color=\"inherit\"\r\n          noWrap\r\n          className={classes.toolbarTitle}\r\n        >\r\n          Public\r\n        </Typography>\r\n        <Box style={{ marginRight: 20, display: \"flex\" }}>\r\n          <Link to={\"/login\"} className={classes.LinkUnderlineRemove}>\r\n            <Button color=\"primary\">\r\n              <Typography variant=\"h5\" className={classes.ButtonText}>\r\n                Sign In\r\n              </Typography>\r\n            </Button>\r\n          </Link>\r\n          <Link to={\"/signup\"} className={classes.LinkUnderlineRemove}>\r\n            <Button color=\"primary\">\r\n              <Typography variant=\"h5\" className={classes.ButtonText}>\r\n                Sign Up\r\n              </Typography>\r\n            </Button>\r\n          </Link>\r\n        </Box>\r\n      </Toolbar>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withStyles(navMui)(PublicUI);\r\n","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Signup\\signupFromValidation.js",[],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\DirectMessage\\muiConversation.js",[],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Blog\\BlogPosts.js",["424","425","426"],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Blog\\muiBlogPosts.js",[],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Blog\\BlogCommentFormValidations.js",[],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\DirectMessage\\DirectMessage.js",["427","428"],"import React, { useEffect, useRef, useState } from \"react\";\r\n// import { Link, useHistory } from \"react-router-dom\";\r\n// import { uuid } from \"uuidv4\";\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\nimport app from \"../../firebase\";\r\n\r\nimport Conversation from \"./Conversation\";\r\nimport UserDetails from \"./UserDetails\";\r\n\r\n//---tab\r\nimport PropTypes from \"prop-types\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { conversationMui } from \"./muiConversation\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  Tabs,\r\n  Tab,\r\n  Box,\r\n  Card,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`vertical-tabpanel-${index}`}\r\n      aria-labelledby={`vertical-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `vertical-tab-${index}`,\r\n    \"aria-controls\": `vertical-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\n//---end tab\r\n\r\nconst DirectMessage = (props) => {\r\n  const { currentUser } = useAuth();\r\n  const { classes } = props;\r\n  const [conversations, setConversations] = useState([]);\r\n  //-tab\r\n  const [value, setValue] = useState(parseInt(0));\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"colleced conversation\");\r\n    getConversation();\r\n  }, []);\r\n\r\n  const getConversation = async () => {\r\n    const db = app.firestore();\r\n\r\n    let conversationRef = db\r\n      .collection(\"conversations\")\r\n      .where(\"participants\", \"array-contains\", `${currentUser.uid}`);\r\n\r\n    conversationRef.onSnapshot(async (querySnapshot) => {\r\n      let listOfConversations = [];\r\n      querySnapshot.forEach(\r\n        (conv) => {\r\n          listOfConversations.push(conv.data());\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      );\r\n      setConversations(listOfConversations);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid container component=\"main\" className={classes.main}>\r\n        <Grid item xs={false} xl={3} lg={2} md={2} sm={1} />\r\n        <Grid item xs={12} xl={6} lg={8} md={8} sm={10}>\r\n          <Paper className={classes.PaperMianCotent}>\r\n            <Card className={classes.root}>\r\n              <Tabs\r\n                orientation=\"vertical\"\r\n                variant=\"scrollable\"\r\n                value={value}\r\n                onChange={handleChange}\r\n                aria-label=\"Vertical tabs example\"\r\n                className={classes.tabs}\r\n              >\r\n                {conversations &&\r\n                  conversations.map((singleConversation, index) => (\r\n                    <Tab\r\n                      key={index}\r\n                      label={\r\n                        <UserDetails party={singleConversation.participants} />\r\n                      }\r\n                      {...a11yProps(parseInt(index))}\r\n                    />\r\n                  ))}\r\n              </Tabs>\r\n              {conversations &&\r\n                conversations.map((singleConversation, index) => (\r\n                  <TabPanel value={value} index={parseInt(index)} key={index}>\r\n                    <Conversation scID={singleConversation} />\r\n                  </TabPanel>\r\n                ))}\r\n            </Card>\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={false} xl={3} lg={2} md={2} sm={1} />\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withStyles(conversationMui)(DirectMessage);\r\n",["429","430"],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Signin\\resetPasswordValidation.js",[],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\AccountSetting\\AccountSettingFormValidation.js",[],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Profile\\UserProfile.js",["431","432","433","434","435","436","437","438","439","440","441","442","443","444"],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\DirectMessage\\CreateConversationFormValidation.js",[],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Gallery\\Sort.js",["445","446","447"],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Profile\\FeaturedSkillCard.js",["448","449","450"],"import React, { useEffect, useState } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport withWidth from \"@material-ui/core/withWidth\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { createProfileMui } from \"./muiProfile\";\r\nimport {\r\n  Grid,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Typography,\r\n  Button,\r\n  Box,\r\n} from \"@material-ui/core\";\r\n\r\nimport CodeIcon from \"@material-ui/icons/Code\";\r\nimport ArrowForwardIcon from \"@material-ui/icons/ArrowForward\";\r\n\r\nconst FeaturedSkillCard = (props) => {\r\n  const { classes, fsk } = props;\r\n\r\n  return (\r\n    <Card className={classes.CardFeaturedSkill}>\r\n      <CardHeader\r\n        title={\r\n          <Box className={classes.CardSubheaderCardFeaturedSkill}>\r\n            <CodeIcon className={classes.IconFeaturedSkill} />\r\n            <Typography\r\n              variant=\"h5\"\r\n              className={classes.TextNeckCardFeaturedSkill}\r\n            >\r\n              {fsk.featureSkillName}\r\n            </Typography>\r\n          </Box>\r\n        }\r\n      />\r\n      <CardContent className={classes.CardFeaturedSkillPlatform}>\r\n        <Typography\r\n          variant=\"body2\"\r\n          className={classes.TextNeckFeaturedSkillPlatformName}\r\n        >\r\n          {fsk.featureSkillSub}\r\n        </Typography>\r\n        <Grid\r\n          container\r\n          spacing={1}\r\n          className={classes.GridFeaturedSkillPlatform}\r\n        >\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            className={classes.GridFeaturedSkillPlatformImageitem}\r\n          >\r\n            {fsk.featureSkillPatform.map((fksi) => (\r\n              <img\r\n                src={fksi.skillCoverPhoto}\r\n                alt=\"\"\r\n                title={fksi.skillName}\r\n                className={classes.ImageFeaturedSkillPlatform}\r\n              />\r\n            ))}\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <CardContent className={classes.CardFeaturedSkillPlatform}>\r\n        <Typography\r\n          variant=\"body2\"\r\n          className={classes.TextNeckFeaturedSkillPlatformName}\r\n        >\r\n          Top Skills\r\n        </Typography>\r\n        <Grid\r\n          container\r\n          spacing={1}\r\n          className={classes.GridFeaturedSkillPlatform}\r\n        >\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            className={classes.GridFeaturedSkillPlatformImageitem}\r\n          >\r\n            {fsk.featureSkills.map((fksi) => (\r\n              <img\r\n                src={fksi.skillCoverPhoto}\r\n                alt=\"\"\r\n                title={fksi.skillName}\r\n                className={classes.ImageFeaturedSkillPlatform}\r\n              />\r\n            ))}\r\n          </Grid>\r\n          <Grid item xs={12} className={classes.GridFeaturedSkillPlatformFoot}>\r\n            <Button\r\n              className={classes.ButtonMore}\r\n              endIcon={<ArrowForwardIcon style={{ fontSize: 15 }} />}\r\n            >\r\n              <Typography variant=\"body2\" className={classes.TextNeckMore}>\r\n                Learn More\r\n              </Typography>\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default withWidth()(withStyles(createProfileMui)(FeaturedSkillCard));\r\n","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\DirectMessage\\Messages.js",["451"],"import React, { useRef } from \"react\";\r\nimport ScrollToBottom from \"react-scroll-to-bottom\";\r\n\r\nimport \"./Messages.css\";\r\nimport Message from \"./Message\";\r\nimport { Box } from \"@material-ui/core\";\r\n\r\nconst Messages = ({ messages, dummy }) => {\r\n  return (\r\n    <>\r\n      <ScrollToBottom className=\"messages\">\r\n        {messages.map((message, i) => (\r\n          <Box key={i}>\r\n            <Message message={message} />\r\n          </Box>\r\n        ))}\r\n      </ScrollToBottom>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Messages;\r\n","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Contact\\ContactFormValidation.js",[],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Gallery\\muiCreateGallery.js",[],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\AccountSetting\\ProfileSettingFormValidation.js",[],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\customRoutes\\AdminRoute.js",[],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\DirectMessage\\UserDetails.js",["452"],"import React, { useEffect, useState } from \"react\";\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\n\r\nimport app from \"../../firebase\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport { Typography, Button } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    justifyContent: \"flex-start\",\r\n  },\r\n  neckText: {\r\n    fontSize: 16,\r\n    fontWeight: 500,\r\n    fontStyle: \"normal\",\r\n    lineHeight: 1,\r\n    color: \"#132743\",\r\n    textTransform: \"none\",\r\n  },\r\n}));\r\n\r\nconst UserDetails = (props) => {\r\n  const { party } = props;\r\n  const classes = useStyles();\r\n  const { currentUser } = useAuth();\r\n  const [other, setOther] = useState({});\r\n\r\n  useEffect(() => {\r\n    console.log(\"finging user\");\r\n    findUser();\r\n  }, []);\r\n\r\n  const findUser = async () => {\r\n    const db = app.firestore();\r\n    party.map(async (people) => {\r\n      if (people !== currentUser.uid) {\r\n        await db\r\n          .doc(`users/${people}`)\r\n          .get()\r\n          .then((doc) => {\r\n            setOther({\r\n              profileName: doc.data().profileName,\r\n              profilePhoto: doc.data().profilePhoto,\r\n            });\r\n          });\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      color=\"primary\"\r\n      size=\"large\"\r\n      className={classes.button}\r\n      startIcon={<Avatar alt=\"Remy Sharp\" src={other.profilePhoto} />}\r\n    >\r\n      <Typography className={classes.neckText}>{other.profileName}</Typography>\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default UserDetails;\r\n","E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Profile\\ProfileMiniCard.js",["453","454","455","456","457"],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\firebase.js",[],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Reviews\\CreateReview.js",["458"],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Reviews\\ReviewCommentsCard.js",["459"],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Reviews\\ReviewCard.js",["460","461","462","463","464"],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Reviews\\Reviews.js",["465","466","467","468"],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Skills\\SkillCard.js",[],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Skills\\muiSKillCard.js",[],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Info\\Info.js",["469","470","471","472"],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Skills\\UpdateSkill.js",["473","474","475","476","477","478","479"],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Reviews\\ReviewCommentFormValidations.js",[],"E:\\#ME\\#CODE\\#XEROX\\PORTFOLIO\\imsizar-production\\src\\components\\Footer\\Footer.js",[],{"ruleId":"480","severity":1,"message":"481","line":3,"column":21,"nodeType":"482","messageId":"483","endLine":3,"endColumn":29},{"ruleId":"480","severity":1,"message":"484","line":19,"column":9,"nodeType":"482","messageId":"483","endLine":19,"endColumn":16},{"ruleId":"485","severity":1,"message":"486","line":81,"column":6,"nodeType":"487","endLine":81,"endColumn":19,"suggestions":"488"},{"ruleId":"489","replacedBy":"490"},{"ruleId":"491","replacedBy":"492"},{"ruleId":"480","severity":1,"message":"493","line":6,"column":15,"nodeType":"482","messageId":"483","endLine":6,"endColumn":19},{"ruleId":"489","replacedBy":"494"},{"ruleId":"491","replacedBy":"495"},{"ruleId":"489","replacedBy":"496"},{"ruleId":"491","replacedBy":"497"},{"ruleId":"498","severity":1,"message":"499","line":84,"column":7,"nodeType":"500","messageId":"501","endLine":84,"endColumn":18},{"ruleId":"489","replacedBy":"502"},{"ruleId":"491","replacedBy":"503"},{"ruleId":"504","severity":1,"message":"505","line":72,"column":9,"nodeType":"506","endLine":72,"endColumn":32},{"ruleId":"504","severity":1,"message":"505","line":84,"column":9,"nodeType":"506","endLine":84,"endColumn":32},{"ruleId":"480","severity":1,"message":"507","line":2,"column":10,"nodeType":"482","messageId":"483","endLine":2,"endColumn":17},{"ruleId":"480","severity":1,"message":"508","line":3,"column":10,"nodeType":"482","messageId":"483","endLine":3,"endColumn":14},{"ruleId":"480","severity":1,"message":"509","line":3,"column":28,"nodeType":"482","messageId":"483","endLine":3,"endColumn":36},{"ruleId":"480","severity":1,"message":"510","line":33,"column":10,"nodeType":"482","messageId":"483","endLine":33,"endColumn":15},{"ruleId":"480","severity":1,"message":"511","line":1,"column":17,"nodeType":"482","messageId":"483","endLine":1,"endColumn":27},{"ruleId":"480","severity":1,"message":"512","line":21,"column":8,"nodeType":"482","messageId":"483","endLine":21,"endColumn":18},{"ruleId":"480","severity":1,"message":"513","line":23,"column":8,"nodeType":"482","messageId":"483","endLine":23,"endColumn":17},{"ruleId":"489","replacedBy":"514"},{"ruleId":"491","replacedBy":"515"},{"ruleId":"480","severity":1,"message":"508","line":3,"column":10,"nodeType":"482","messageId":"483","endLine":3,"endColumn":14},{"ruleId":"480","severity":1,"message":"516","line":3,"column":16,"nodeType":"482","messageId":"483","endLine":3,"endColumn":26},{"ruleId":"480","severity":1,"message":"509","line":3,"column":28,"nodeType":"482","messageId":"483","endLine":3,"endColumn":36},{"ruleId":"489","replacedBy":"517"},{"ruleId":"491","replacedBy":"518"},{"ruleId":"480","severity":1,"message":"519","line":8,"column":8,"nodeType":"482","messageId":"483","endLine":8,"endColumn":12},{"ruleId":"480","severity":1,"message":"520","line":28,"column":20,"nodeType":"482","messageId":"483","endLine":28,"endColumn":25},{"ruleId":"480","severity":1,"message":"510","line":30,"column":10,"nodeType":"482","messageId":"483","endLine":30,"endColumn":15},{"ruleId":"480","severity":1,"message":"521","line":6,"column":8,"nodeType":"482","messageId":"483","endLine":6,"endColumn":11},{"ruleId":"480","severity":1,"message":"493","line":6,"column":15,"nodeType":"482","messageId":"483","endLine":6,"endColumn":19},{"ruleId":"480","severity":1,"message":"522","line":51,"column":10,"nodeType":"482","messageId":"483","endLine":51,"endColumn":17},{"ruleId":"480","severity":1,"message":"523","line":52,"column":10,"nodeType":"482","messageId":"483","endLine":52,"endColumn":14},{"ruleId":"480","severity":1,"message":"524","line":81,"column":9,"nodeType":"482","messageId":"483","endLine":81,"endColumn":20},{"ruleId":"489","replacedBy":"525"},{"ruleId":"491","replacedBy":"526"},{"ruleId":"480","severity":1,"message":"516","line":2,"column":16,"nodeType":"482","messageId":"483","endLine":2,"endColumn":26},{"ruleId":"480","severity":1,"message":"527","line":52,"column":20,"nodeType":"482","messageId":"483","endLine":52,"endColumn":28},{"ruleId":"480","severity":1,"message":"528","line":7,"column":8,"nodeType":"482","messageId":"483","endLine":7,"endColumn":15},{"ruleId":"480","severity":1,"message":"529","line":8,"column":16,"nodeType":"482","messageId":"483","endLine":8,"endColumn":22},{"ruleId":"480","severity":1,"message":"530","line":9,"column":8,"nodeType":"482","messageId":"483","endLine":9,"endColumn":13},{"ruleId":"480","severity":1,"message":"508","line":2,"column":10,"nodeType":"482","messageId":"483","endLine":2,"endColumn":14},{"ruleId":"480","severity":1,"message":"531","line":4,"column":15,"nodeType":"482","messageId":"483","endLine":4,"endColumn":22},{"ruleId":"480","severity":1,"message":"522","line":49,"column":10,"nodeType":"482","messageId":"483","endLine":49,"endColumn":17},{"ruleId":"480","severity":1,"message":"493","line":7,"column":15,"nodeType":"482","messageId":"483","endLine":7,"endColumn":19},{"ruleId":"480","severity":1,"message":"532","line":16,"column":21,"nodeType":"482","messageId":"483","endLine":16,"endColumn":30},{"ruleId":"480","severity":1,"message":"533","line":33,"column":3,"nodeType":"482","messageId":"483","endLine":33,"endColumn":11},{"ruleId":"480","severity":1,"message":"534","line":47,"column":11,"nodeType":"482","messageId":"483","endLine":47,"endColumn":22},{"ruleId":"480","severity":1,"message":"484","line":52,"column":9,"nodeType":"482","messageId":"483","endLine":52,"endColumn":16},{"ruleId":"489","replacedBy":"535"},{"ruleId":"491","replacedBy":"536"},{"ruleId":"480","severity":1,"message":"532","line":20,"column":21,"nodeType":"482","messageId":"483","endLine":20,"endColumn":30},{"ruleId":"480","severity":1,"message":"537","line":25,"column":3,"nodeType":"482","messageId":"483","endLine":25,"endColumn":17},{"ruleId":"504","severity":1,"message":"505","line":191,"column":33,"nodeType":"506","endLine":191,"endColumn":51},{"ruleId":"504","severity":1,"message":"505","line":193,"column":33,"nodeType":"506","endLine":193,"endColumn":49},{"ruleId":"480","severity":1,"message":"522","line":33,"column":10,"nodeType":"482","messageId":"483","endLine":33,"endColumn":17},{"ruleId":"485","severity":1,"message":"538","line":38,"column":6,"nodeType":"487","endLine":38,"endColumn":23,"suggestions":"539"},{"ruleId":"480","severity":1,"message":"508","line":2,"column":10,"nodeType":"482","messageId":"483","endLine":2,"endColumn":14},{"ruleId":"480","severity":1,"message":"522","line":66,"column":10,"nodeType":"482","messageId":"483","endLine":66,"endColumn":17},{"ruleId":"485","severity":1,"message":"540","line":121,"column":6,"nodeType":"487","endLine":121,"endColumn":16,"suggestions":"541"},{"ruleId":"480","severity":1,"message":"542","line":398,"column":19,"nodeType":"482","messageId":"483","endLine":398,"endColumn":26},{"ruleId":"480","severity":1,"message":"543","line":399,"column":19,"nodeType":"482","messageId":"483","endLine":399,"endColumn":25},{"ruleId":"489","replacedBy":"544"},{"ruleId":"491","replacedBy":"545"},{"ruleId":"489","replacedBy":"546"},{"ruleId":"491","replacedBy":"547"},{"ruleId":"480","severity":1,"message":"548","line":1,"column":28,"nodeType":"482","messageId":"483","endLine":1,"endColumn":34},{"ruleId":"480","severity":1,"message":"508","line":2,"column":10,"nodeType":"482","messageId":"483","endLine":2,"endColumn":14},{"ruleId":"480","severity":1,"message":"516","line":2,"column":16,"nodeType":"482","messageId":"483","endLine":2,"endColumn":26},{"ruleId":"480","severity":1,"message":"549","line":3,"column":10,"nodeType":"482","messageId":"483","endLine":3,"endColumn":16},{"ruleId":"480","severity":1,"message":"550","line":3,"column":18,"nodeType":"482","messageId":"483","endLine":3,"endColumn":22},{"ruleId":"485","severity":1,"message":"551","line":24,"column":6,"nodeType":"487","endLine":24,"endColumn":8,"suggestions":"552"},{"ruleId":"489","replacedBy":"553"},{"ruleId":"491","replacedBy":"554"},{"ruleId":"480","severity":1,"message":"493","line":6,"column":15,"nodeType":"482","messageId":"483","endLine":6,"endColumn":19},{"ruleId":"480","severity":1,"message":"532","line":15,"column":21,"nodeType":"482","messageId":"483","endLine":15,"endColumn":30},{"ruleId":"480","severity":1,"message":"484","line":50,"column":9,"nodeType":"482","messageId":"483","endLine":50,"endColumn":16},{"ruleId":"480","severity":1,"message":"523","line":52,"column":10,"nodeType":"482","messageId":"483","endLine":52,"endColumn":14},{"ruleId":"485","severity":1,"message":"555","line":59,"column":6,"nodeType":"487","endLine":59,"endColumn":8,"suggestions":"556"},{"ruleId":"480","severity":1,"message":"524","line":136,"column":9,"nodeType":"482","messageId":"483","endLine":136,"endColumn":20},{"ruleId":"480","severity":1,"message":"557","line":192,"column":23,"nodeType":"482","messageId":"483","endLine":192,"endColumn":29},{"ruleId":"480","severity":1,"message":"532","line":20,"column":21,"nodeType":"482","messageId":"483","endLine":20,"endColumn":30},{"ruleId":"480","severity":1,"message":"558","line":40,"column":8,"nodeType":"482","messageId":"483","endLine":40,"endColumn":16},{"ruleId":"480","severity":1,"message":"559","line":41,"column":8,"nodeType":"482","messageId":"483","endLine":41,"endColumn":16},{"ruleId":"480","severity":1,"message":"522","line":58,"column":10,"nodeType":"482","messageId":"483","endLine":58,"endColumn":17},{"ruleId":"480","severity":1,"message":"523","line":60,"column":10,"nodeType":"482","messageId":"483","endLine":60,"endColumn":14},{"ruleId":"480","severity":1,"message":"560","line":96,"column":13,"nodeType":"482","messageId":"483","endLine":96,"endColumn":15},{"ruleId":"480","severity":1,"message":"524","line":151,"column":9,"nodeType":"482","messageId":"483","endLine":151,"endColumn":20},{"ruleId":"489","replacedBy":"561"},{"ruleId":"491","replacedBy":"562"},{"ruleId":"480","severity":1,"message":"563","line":2,"column":10,"nodeType":"482","messageId":"483","endLine":2,"endColumn":20},{"ruleId":"480","severity":1,"message":"564","line":5,"column":3,"nodeType":"482","messageId":"483","endLine":5,"endColumn":7},{"ruleId":"480","severity":1,"message":"565","line":8,"column":3,"nodeType":"482","messageId":"483","endLine":8,"endColumn":13},{"ruleId":"480","severity":1,"message":"566","line":2,"column":10,"nodeType":"482","messageId":"483","endLine":2,"endColumn":29},{"ruleId":"480","severity":1,"message":"532","line":20,"column":21,"nodeType":"482","messageId":"483","endLine":20,"endColumn":30},{"ruleId":"567","severity":1,"message":"568","line":87,"column":29,"nodeType":"569","messageId":"570","endLine":87,"endColumn":31},{"ruleId":"480","severity":1,"message":"532","line":19,"column":21,"nodeType":"482","messageId":"483","endLine":19,"endColumn":30},{"ruleId":"567","severity":1,"message":"568","line":84,"column":29,"nodeType":"569","messageId":"570","endLine":84,"endColumn":31},{"ruleId":"480","severity":1,"message":"531","line":6,"column":15,"nodeType":"482","messageId":"483","endLine":6,"endColumn":22},{"ruleId":"480","severity":1,"message":"571","line":12,"column":10,"nodeType":"482","messageId":"483","endLine":12,"endColumn":21},{"ruleId":"480","severity":1,"message":"532","line":16,"column":21,"nodeType":"482","messageId":"483","endLine":16,"endColumn":30},{"ruleId":"480","severity":1,"message":"534","line":49,"column":11,"nodeType":"482","messageId":"483","endLine":49,"endColumn":22},{"ruleId":"480","severity":1,"message":"572","line":1,"column":17,"nodeType":"482","messageId":"483","endLine":1,"endColumn":25},{"ruleId":"480","severity":1,"message":"516","line":2,"column":16,"nodeType":"482","messageId":"483","endLine":2,"endColumn":26},{"ruleId":"480","severity":1,"message":"564","line":6,"column":36,"nodeType":"482","messageId":"483","endLine":6,"endColumn":40},{"ruleId":"480","severity":1,"message":"573","line":20,"column":10,"nodeType":"482","messageId":"483","endLine":20,"endColumn":21},{"ruleId":"480","severity":1,"message":"522","line":39,"column":10,"nodeType":"482","messageId":"483","endLine":39,"endColumn":17},{"ruleId":"485","severity":1,"message":"574","line":46,"column":6,"nodeType":"487","endLine":46,"endColumn":23,"suggestions":"575"},{"ruleId":"480","severity":1,"message":"548","line":1,"column":28,"nodeType":"482","messageId":"483","endLine":1,"endColumn":34},{"ruleId":"485","severity":1,"message":"551","line":73,"column":6,"nodeType":"487","endLine":73,"endColumn":8,"suggestions":"576"},{"ruleId":"489","replacedBy":"577"},{"ruleId":"491","replacedBy":"578"},{"ruleId":"480","severity":1,"message":"508","line":2,"column":10,"nodeType":"482","messageId":"483","endLine":2,"endColumn":14},{"ruleId":"480","severity":1,"message":"531","line":4,"column":15,"nodeType":"482","messageId":"483","endLine":4,"endColumn":22},{"ruleId":"480","severity":1,"message":"579","line":7,"column":8,"nodeType":"482","messageId":"483","endLine":7,"endColumn":25},{"ruleId":"480","severity":1,"message":"528","line":8,"column":8,"nodeType":"482","messageId":"483","endLine":8,"endColumn":15},{"ruleId":"480","severity":1,"message":"580","line":9,"column":8,"nodeType":"482","messageId":"483","endLine":9,"endColumn":26},{"ruleId":"480","severity":1,"message":"581","line":23,"column":3,"nodeType":"482","messageId":"483","endLine":23,"endColumn":9},{"ruleId":"480","severity":1,"message":"582","line":25,"column":3,"nodeType":"482","messageId":"483","endLine":25,"endColumn":14},{"ruleId":"480","severity":1,"message":"583","line":27,"column":3,"nodeType":"482","messageId":"483","endLine":27,"endColumn":8},{"ruleId":"480","severity":1,"message":"584","line":28,"column":3,"nodeType":"482","messageId":"483","endLine":28,"endColumn":11},{"ruleId":"480","severity":1,"message":"585","line":29,"column":3,"nodeType":"482","messageId":"483","endLine":29,"endColumn":7},{"ruleId":"480","severity":1,"message":"534","line":44,"column":11,"nodeType":"482","messageId":"483","endLine":44,"endColumn":22},{"ruleId":"480","severity":1,"message":"522","line":47,"column":10,"nodeType":"482","messageId":"483","endLine":47,"endColumn":17},{"ruleId":"480","severity":1,"message":"586","line":52,"column":9,"nodeType":"482","messageId":"483","endLine":52,"endColumn":26},{"ruleId":"485","severity":1,"message":"587","line":59,"column":6,"nodeType":"487","endLine":59,"endColumn":8,"suggestions":"588"},{"ruleId":"480","severity":1,"message":"563","line":2,"column":10,"nodeType":"482","messageId":"483","endLine":2,"endColumn":20},{"ruleId":"480","severity":1,"message":"564","line":5,"column":3,"nodeType":"482","messageId":"483","endLine":5,"endColumn":7},{"ruleId":"480","severity":1,"message":"565","line":8,"column":3,"nodeType":"482","messageId":"483","endLine":8,"endColumn":13},{"ruleId":"480","severity":1,"message":"589","line":1,"column":17,"nodeType":"482","messageId":"483","endLine":1,"endColumn":26},{"ruleId":"480","severity":1,"message":"572","line":1,"column":28,"nodeType":"482","messageId":"483","endLine":1,"endColumn":36},{"ruleId":"480","severity":1,"message":"519","line":2,"column":8,"nodeType":"482","messageId":"483","endLine":2,"endColumn":12},{"ruleId":"480","severity":1,"message":"548","line":1,"column":17,"nodeType":"482","messageId":"483","endLine":1,"endColumn":23},{"ruleId":"485","severity":1,"message":"590","line":33,"column":6,"nodeType":"487","endLine":33,"endColumn":8,"suggestions":"591"},{"ruleId":"480","severity":1,"message":"592","line":21,"column":8,"nodeType":"482","messageId":"483","endLine":21,"endColumn":20},{"ruleId":"480","severity":1,"message":"534","line":29,"column":11,"nodeType":"482","messageId":"483","endLine":29,"endColumn":22},{"ruleId":"480","severity":1,"message":"593","line":29,"column":24,"nodeType":"482","messageId":"483","endLine":29,"endColumn":42},{"ruleId":"480","severity":1,"message":"522","line":31,"column":10,"nodeType":"482","messageId":"483","endLine":31,"endColumn":17},{"ruleId":"485","severity":1,"message":"594","line":36,"column":6,"nodeType":"487","endLine":36,"endColumn":15,"suggestions":"595"},{"ruleId":"504","severity":1,"message":"505","line":213,"column":33,"nodeType":"506","endLine":213,"endColumn":51},{"ruleId":"480","severity":1,"message":"566","line":2,"column":10,"nodeType":"482","messageId":"483","endLine":2,"endColumn":29},{"ruleId":"480","severity":1,"message":"596","line":1,"column":38,"nodeType":"482","messageId":"483","endLine":1,"endColumn":45},{"ruleId":"480","severity":1,"message":"522","line":67,"column":10,"nodeType":"482","messageId":"483","endLine":67,"endColumn":17},{"ruleId":"485","severity":1,"message":"597","line":107,"column":6,"nodeType":"487","endLine":107,"endColumn":16,"suggestions":"598"},{"ruleId":"480","severity":1,"message":"542","line":355,"column":19,"nodeType":"482","messageId":"483","endLine":355,"endColumn":26},{"ruleId":"480","severity":1,"message":"543","line":356,"column":19,"nodeType":"482","messageId":"483","endLine":356,"endColumn":25},{"ruleId":"480","severity":1,"message":"563","line":2,"column":10,"nodeType":"482","messageId":"483","endLine":2,"endColumn":20},{"ruleId":"480","severity":1,"message":"599","line":27,"column":3,"nodeType":"482","messageId":"483","endLine":27,"endColumn":8},{"ruleId":"480","severity":1,"message":"522","line":40,"column":10,"nodeType":"482","messageId":"483","endLine":40,"endColumn":17},{"ruleId":"485","severity":1,"message":"600","line":47,"column":6,"nodeType":"487","endLine":47,"endColumn":23,"suggestions":"601"},{"ruleId":"480","severity":1,"message":"572","line":1,"column":17,"nodeType":"482","messageId":"483","endLine":1,"endColumn":25},{"ruleId":"480","severity":1,"message":"548","line":1,"column":27,"nodeType":"482","messageId":"483","endLine":1,"endColumn":33},{"ruleId":"480","severity":1,"message":"563","line":2,"column":10,"nodeType":"482","messageId":"483","endLine":2,"endColumn":20},{"ruleId":"480","severity":1,"message":"508","line":3,"column":10,"nodeType":"482","messageId":"483","endLine":3,"endColumn":14},{"ruleId":"480","severity":1,"message":"531","line":6,"column":15,"nodeType":"482","messageId":"483","endLine":6,"endColumn":22},{"ruleId":"480","severity":1,"message":"602","line":19,"column":8,"nodeType":"482","messageId":"483","endLine":19,"endColumn":17},{"ruleId":"480","severity":1,"message":"532","line":19,"column":21,"nodeType":"482","messageId":"483","endLine":19,"endColumn":30},{"ruleId":"480","severity":1,"message":"529","line":41,"column":3,"nodeType":"482","messageId":"483","endLine":41,"endColumn":9},{"ruleId":"480","severity":1,"message":"534","line":60,"column":11,"nodeType":"482","messageId":"483","endLine":60,"endColumn":22},{"ruleId":"480","severity":1,"message":"603","line":63,"column":10,"nodeType":"482","messageId":"483","endLine":63,"endColumn":25},{"ruleId":"480","severity":1,"message":"604","line":68,"column":10,"nodeType":"482","messageId":"483","endLine":68,"endColumn":26},"no-unused-vars","'provider' is defined but never used.","Identifier","unusedVar","'history' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'upp'. Either include it or remove the dependency array.","ArrayExpression",["605"],"no-native-reassign",["606"],"no-negated-in-lhs",["607"],"'auth' is defined but never used.",["606"],["607"],["606"],["607"],"no-dupe-keys","Duplicate key 'marginRight'.","ObjectExpression","unexpected",["606"],["607"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'useAuth' is defined but never used.","'Link' is defined but never used.","'Redirect' is defined but never used.","'error' is assigned a value but never used.","'useContext' is defined but never used.","'AdminRoute' is defined but never used.","'RouteBack' is defined but never used.",["606"],["607"],"'useHistory' is defined but never used.",["606"],["607"],"'clsx' is defined but never used.","'width' is assigned a value but never used.","'app' is defined but never used.","'loading' is assigned a value but never used.","'open' is assigned a value but never used.","'handleClose' is assigned a value but never used.",["606"],["607"],"'password' is assigned a value but never used.","'Contact' is defined but never used.","'Hidden' is defined but never used.","'bgsvg' is defined but never used.","'stroage' is defined but never used.","'isWidthUp' is defined but never used.","'MenuItem' is defined but never used.","'currentUser' is assigned a value but never used.",["606"],["607"],"'InputAdornment' is defined but never used.","React Hook useEffect has a missing dependency: 'getGalleryPhotos'. Either include it or remove the dependency array.",["608"],"React Hook useEffect has a missing dependency: 'getBlogComments'. Either include it or remove the dependency array.",["609"],"'touched' is assigned a value but never used.","'errors' is assigned a value but never used.",["606"],["607"],["606"],["607"],"'useRef' is defined but never used.","'Formik' is defined but never used.","'Form' is defined but never used.","React Hook useEffect has a missing dependency: 'getConversation'. Either include it or remove the dependency array.",["610"],["606"],["607"],"React Hook useEffect has a missing dependency: 'getUserProfile'. Either include it or remove the dependency array.",["611"],"'values' is assigned a value but never used.","'Snackbar' is defined but never used.","'MuiAlert' is defined but never used.","'db' is assigned a value but never used.",["606"],["607"],"'withStyles' is defined but never used.","'Grid' is defined but never used.","'IconButton' is defined but never used.","'formatDistanceToNow' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useSnackbar' is defined but never used.","'useState' is defined but never used.","'blogPostMui' is defined but never used.","React Hook useEffect has a missing dependency: 'getblogPosts'. Either include it or remove the dependency array.",["612"],["613"],["606"],["607"],"'FeaturedSkillCard' is defined but never used.","'CreateConversation' is defined but never used.","'Button' is defined but never used.","'CardActions' is defined but never used.","'Modal' is defined but never used.","'Backdrop' is defined but never used.","'Fade' is defined but never used.","'handleExpandClick' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getProfile'. Either include it or remove the dependency array.",["614"],"'useEffect' is defined but never used.","React Hook useEffect has a missing dependency: 'findUser'. Either include it or remove the dependency array.",["615"],"'TelegramIcon' is defined but never used.","'currentUserProfile' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getMiniPro'. Either include it or remove the dependency array.",["616"],"'useMemo' is defined but never used.","React Hook useEffect has a missing dependency: 'getReviewComments'. Either include it or remove the dependency array.",["617"],"'Paper' is defined but never used.","React Hook useEffect has a missing dependency: 'getReviews'. Either include it or remove the dependency array.",["618"],"'withWidth' is defined but never used.","'skillCoverPhoto' is assigned a value but never used.","'previewSKillCard' is assigned a value but never used.",{"desc":"619","fix":"620"},"no-global-assign","no-unsafe-negation",{"desc":"621","fix":"622"},{"desc":"623","fix":"624"},{"desc":"625","fix":"626"},{"desc":"627","fix":"628"},{"desc":"629","fix":"630"},{"desc":"625","fix":"631"},{"desc":"632","fix":"633"},{"desc":"634","fix":"635"},{"desc":"636","fix":"637"},{"desc":"638","fix":"639"},{"desc":"640","fix":"641"},"Update the dependencies array to be: [currentUser, upp]",{"range":"642","text":"643"},"Update the dependencies array to be: [desc, getGalleryPhotos, sortValue]",{"range":"644","text":"645"},"Update the dependencies array to be: [expanded, getBlogComments]",{"range":"646","text":"647"},"Update the dependencies array to be: [getConversation]",{"range":"648","text":"649"},"Update the dependencies array to be: [getUserProfile]",{"range":"650","text":"651"},"Update the dependencies array to be: [desc, getblogPosts, sortValue]",{"range":"652","text":"653"},{"range":"654","text":"649"},"Update the dependencies array to be: [getProfile]",{"range":"655","text":"656"},"Update the dependencies array to be: [findUser]",{"range":"657","text":"658"},"Update the dependencies array to be: [getMiniPro, trigger]",{"range":"659","text":"660"},"Update the dependencies array to be: [expanded, getReviewComments]",{"range":"661","text":"662"},"Update the dependencies array to be: [desc, getReviews, sortValue]",{"range":"663","text":"664"},[2347,2360],"[currentUser, upp]",[1262,1279],"[desc, getGalleryPhotos, sortValue]",[3148,3158],"[expanded, getBlogComments]",[839,841],"[getConversation]",[1741,1743],"[getUserProfile]",[1173,1190],"[desc, getblogPosts, sortValue]",[1707,1709],[1852,1854],"[getProfile]",[829,831],"[findUser]",[1062,1071],"[getMiniPro, trigger]",[2680,2690],"[expanded, getReviewComments]",[1110,1127],"[desc, getReviews, sortValue]"]